(ns notes-app.states.links
  (:require
   [notes-app.services.db :as db]
   [notes-app.utils.state-helpers :as helpers]
   [notes-app.states.stats :as stats]))

;; Links State Management
;; Responsible for managing links-related states, including links list, current link, etc.

;; Links State
(def links-state
  (atom
   (helpers/create-base-state
    {:links []
     :current-link nil})))

;; ===== Links State Operations =====

;; Load all links


;; Create link
(defn create-link! [ctx note-id url title]
  (helpers/with-success-toast! ctx links-state
    (-> (db/create-link note-id url title)
        (.then (fn [link]
                 (swap! links-state assoc
                        :links (conj (:links @links-state) link)
                        :loading false)
                 (stats/on-link-created!)
                 link)))
    "Холбоос амжилттай үүслээ"))

;; Update link
(defn update-link! [ctx id url title]
  (helpers/with-success-toast! ctx links-state
    (-> (db/update-link id url title)
        (.then (fn [success]
                 (when success
                   (let [updated-links (map (fn [link]
                                             (if (= (:id link) id)
                                               (assoc link :url url :title title)
                                               link))
                                           (:links @links-state))]
                     (swap! links-state assoc :links updated-links)))
                 success)))
    "Холбоос амжилттай шинэчлэгдлээ"))

;; Delete link
(defn delete-link! [ctx id]
  (helpers/with-success-toast! ctx links-state
    (-> (db/delete-link id)
        (.then (fn [success]
                 (when success
                   (swap! links-state assoc
                          :links (filter #(not= (:id %) id) (:links @links-state)))
                   (stats/on-link-deleted!))
                 success)))
    "Холбоос амжилттай устгагдлаа"))

;; Get link by id
(defn get-link-by-id! [ctx id]
  (helpers/with-loading-state! ctx links-state
    (-> (db/get-link-by-id id)
        (.then (fn [link]
                 (swap! links-state assoc :current-link link :loading false))))))

;; Set current link
(defn set-current-link! [link]
  (swap! links-state assoc :current-link link))

;; Clear current link
(defn clear-current-link! []
  (swap! links-state assoc :current-link nil))

;; Search links




;; ===== Links State Queries =====

;; Get links state
(defn get-links-state []
  (helpers/get-state links-state))

;; Get links list
(defn get-links []
  (:links @links-state))

;; Get current link
(defn get-current-link []
  (:current-link @links-state))

;; Check if loading
(defn is-loading? []
  (helpers/is-loading? links-state))

;; Check if loading more
(defn is-loading-more? []
  (helpers/is-loading-more? links-state))

;; Check if has more
(defn has-more? []
  (helpers/has-more? links-state))

;; Get error
(defn get-error []
  (helpers/get-error links-state))

;; Get current page
(defn get-current-page []
  (helpers/get-current-page links-state))

;; Get total count
(defn get-total-count []
  (helpers/get-total-count links-state))

;; Get page size
(defn get-page-size []
  (helpers/get-page-size links-state))

;; Get links by note id
(defn get-links-by-note-id [note-id]
  (filter #(= (:toNoteId %) note-id) (:links @links-state)))

;; Get link by url
(defn get-link-by-url [url]
  (first (filter #(= (:url %) url) (:links @links-state))))

;; ===== Links State Reset =====

;; Reset links state
(defn reset-links-state! []
  (helpers/reset-state! links-state
    {:links []
     :current-link nil}))