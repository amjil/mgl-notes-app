(ns notes-app.states.notes
  (:require
   ["package:uuid/uuid.dart" :as uuid]
   [notes-app.services.db :as db]
   [notes-app.utils.state-helpers :as helpers]
   [notes-app.utils.date :as date]
   [notes-app.states.calendar :as calendar]
   [notes-app.states.stats :as stats]))

;; Notes State Management
;; Responsible for managing notes-related states, including notes list, current note, etc.

;; Notes State
(def notes-state
  (atom
   (helpers/create-base-state
    {:notes []
     :current-note nil})))

(def ^uuid/Uuid uuid-instance (uuid/Uuid.))

;; ===== Notes State Operations =====

;; Load notes paginated
(defn load-notes-paginated! [ctx page & [page-size]]
  (let [limit (or page-size 20)]
    (helpers/with-loading-state! ctx notes-state
      (-> (db/get-notes-paginated page limit)
          (.then (fn [notes]
                   (helpers/handle-pagination-result! notes-state page notes limit)))))))

;; Load all notes
(defn load-all-notes! [ctx]
  (helpers/with-loading-state! ctx notes-state
    (-> (db/get-all-notes)
        (.then (fn [notes]
                 (swap! notes-state assoc :notes notes :loading false))))))

;; Create note
(defn create-note! [ctx title]
  (helpers/with-success-toast! ctx notes-state
    (-> (db/create-note (.v4 uuid-instance) title)
        (.then (fn [success]
                 (when success
                   (load-notes-paginated! ctx 0)
                   ;; Refresh today's count
                   (calendar/refresh-today-count! ctx)
                   (stats/refresh-stats!))
                 success)))
    "Тэмдэглэл амжилттай үүслээ"))

;; Create note with content (4 steps)
(defn create-note-with-content! [ctx content]
  (helpers/with-success-toast! ctx notes-state
    (-> (db/create-note-with-content content)
        (.then (fn [result]
                 (when result
                   (load-notes-paginated! ctx 0)
                   ;; Refresh today's count
                   (calendar/refresh-today-count! ctx)
                   (stats/refresh-stats!))
                 result)))
    "Тэмдэглэл амжилттай үүслээ"))

;; Update note
(defn update-note! [ctx id title]
  (helpers/with-success-toast! ctx notes-state
    (-> (db/update-note id title)
        (.then (fn [success]
                 (when success
                   (load-notes-paginated! ctx (:current-page @notes-state)))
                 success)))
    "Тэмдэглэл амжилттай шинэчлэгдлээ"))

;; Update note with content (4 steps)
(defn update-note-with-content! [ctx id content]
  (helpers/with-success-toast! ctx notes-state
    (-> (db/update-note-with-content id content)
        (.then (fn [result]
                 (when result
                   (load-notes-paginated! ctx (:current-page @notes-state)))
                 result)))
    "Тэмдэглэл амжилттай шинэчлэгдлээ"))

;; Delete note
(defn delete-note! [ctx id]
  (helpers/with-success-toast! ctx notes-state
    (-> (db/delete-note id)
        (.then (fn [success]
                 (when success
                   (load-notes-paginated! ctx (:current-page @notes-state))
                   ;; Refresh today's count
                   (calendar/refresh-today-count! ctx)
                   (stats/refresh-stats!))
                 success)))
    "Тэмдэглэл амжилттай устгагдлаа"))

;; Delete note with blocks (3 steps)
(defn delete-note-with-blocks! [ctx id]
  (helpers/with-success-toast! ctx notes-state
    (-> (db/delete-note-with-blocks id)
        (.then (fn [success]
                 (when success
                   (load-notes-paginated! ctx (:current-page @notes-state))
                   ;; Refresh today's count
                   (calendar/refresh-today-count! ctx)
                   (stats/refresh-stats!))
                 success)))
    "Тэмдэглэл амжилттай устгагдлаа"))

;; Get note by id
(defn get-note-by-id! [ctx id]
  (helpers/with-loading-state! ctx notes-state
    (-> (db/get-note-by-id id)
        (.then (fn [note]
                 (swap! notes-state assoc :current-note note :loading false))))))

;; Set current note
(defn set-current-note! [note]
  (swap! notes-state assoc :current-note note))

;; Clear current note
(defn clear-current-note! []
  (swap! notes-state assoc :current-note nil))

;; Load more notes
(defn load-more-notes! [ctx]
  (helpers/load-more-helper! ctx notes-state
    (fn [page page-size]
      (db/get-notes-paginated page page-size))))

;; ===== Notes State Queries =====

;; Get notes state
(defn get-notes-state []
  (helpers/get-state notes-state))

;; Get notes list
(defn get-notes []
  (:results @notes-state))

;; Get current note
(defn get-current-note []
  (:current-note @notes-state))

;; Check if loading
(defn is-loading? []
  (helpers/is-loading? notes-state))

;; Check if loading more
(defn is-loading-more? []
  (helpers/is-loading-more? notes-state))

;; Check if has more
(defn has-more? []
  (helpers/has-more? notes-state))

;; Get error
(defn get-error []
  (helpers/get-error notes-state))

;; Get current page
(defn get-current-page []
  (helpers/get-current-page notes-state))

;; Get total count
(defn get-total-count []
  (helpers/get-total-count notes-state))

;; Get page size
(defn get-page-size []
  (helpers/get-page-size notes-state))

;; ===== Notes State Reset =====

;; Reset notes state
(defn reset-notes-state! []
  (helpers/reset-state! notes-state
    {:notes []
     :current-note nil}))

(defn get-notes-for-stream []
  (let [limit 20]
    (db/get-notes-paginated 0 limit)))

(defn handle-notes-result-for-stream [notes]
  (helpers/handle-pagination-result! notes-state 0 notes 20))