(ns notes-app.states.conflict
  (:require
   ["package:uuid/uuid.dart" :as uuid]
   [notes-app.services.db :as db]
   [notes-app.utils.state-helpers :as helpers]))

;; Conflict State Management
;; Responsible for managing sync conflicts-related states, including conflicts list, current conflict, etc.

;; Constants for better maintainability
(def DEFAULT_PAGE_SIZE 20)
(def MAX_CONFLICTS_LOAD 1000)
(def DEFAULT_CONFLICT_TYPE "version_conflict")

;; Conflict State
(def conflict-state
  (atom
   (helpers/create-base-state
    {:conflicts []
     :current-conflict nil
     :conflict-summary {}
     :filter-resolution nil
     :filter-type nil})))

(def ^uuid/Uuid uuid-instance (uuid/Uuid.))

;; ===== Conflict State Operations =====

;; Generic conflict loading function to reduce code duplication
(defn- load-conflicts-generic! [ctx db-fn & args]
  (helpers/with-loading-state! ctx conflict-state
    (-> (apply db-fn args)
        (.then (fn [conflicts]
                 (swap! conflict-state assoc :conflicts conflicts :loading false))))))

;; Load all conflicts
(defn load-all-conflicts! [ctx]
  (load-conflicts-generic! ctx db/get-sync-conflicts-paginated 0 MAX_CONFLICTS_LOAD))

;; Load conflicts paginated
(defn load-conflicts-paginated! [ctx page & [page-size]]
  (let [limit (or page-size DEFAULT_PAGE_SIZE)]
    (helpers/with-loading-state! ctx conflict-state
      (-> (db/get-sync-conflicts-paginated page limit)
          (.then (fn [conflicts]
                   (helpers/handle-pagination-result! conflict-state page conflicts limit)))))))

;; Load pending conflicts
(defn load-pending-conflicts! [ctx]
  (load-conflicts-generic! ctx db/get-pending-sync-conflicts))

;; Load conflicts by note id
(defn load-conflicts-by-note-id! [ctx note-id]
  (load-conflicts-generic! ctx db/get-sync-conflicts-by-note-id note-id))

;; Load conflicts by resolution
(defn load-conflicts-by-resolution! [ctx resolution]
  (load-conflicts-generic! ctx db/get-sync-conflicts-by-resolution resolution))

;; Load conflicts by type
(defn load-conflicts-by-type! [ctx conflict-type]
  (load-conflicts-generic! ctx db/get-sync-conflicts-by-type conflict-type))

;; Load conflict summary
(defn load-conflict-summary! [ctx]
  (helpers/with-loading-state! ctx conflict-state
    (-> (db/get-sync-conflicts-summary)
        (.then (fn [summary]
                 (swap! conflict-state assoc :conflict-summary summary :loading false))))))


;; Create conflict with better validation
(defn create-conflict! [ctx note-id local-data remote-data & {:keys [description conflict-type] :or {description nil conflict-type DEFAULT_CONFLICT_TYPE}}]
  (when (and note-id local-data remote-data)
    (helpers/with-success-toast! ctx conflict-state
      (-> (db/create-sync-conflict note-id local-data remote-data :description description)
          (.then (fn [conflict]
                   (load-conflicts-paginated! ctx 0 20)
                   conflict)))
      "Зөрчлийг амжилттай үүсгэлээ")))

;; Get conflict by id
(defn get-conflict-by-id! [ctx id]
  (when id
    (helpers/with-loading-state! ctx conflict-state
      (-> (db/get-sync-conflict-by-id id)
          (.then (fn [conflict]
                   (swap! conflict-state assoc :current-conflict conflict :loading false)
                   conflict))))))

;; Generic conflict resolution function
(defn- resolve-conflict-generic! [ctx id resolution description]
  (helpers/with-success-toast! ctx conflict-state
    (-> (db/resolve-sync-conflict id resolution :description description)
        (.then (fn [success]
                 (when success
                   (load-conflicts-paginated! ctx 0 20))
                 success)))
    "Зөрчлийг амжилттай шийдлээ"))

;; Resolve conflict
(defn resolve-conflict! [ctx id resolution & {:keys [description] :or {description nil}}]
  (when (and id resolution)
    (resolve-conflict-generic! ctx id resolution description)))

;; Generic conflict deletion function
(defn- delete-conflict-generic! [ctx db-fn success-message & args]
  (helpers/with-success-toast! ctx conflict-state
    (-> (apply db-fn args)
        (.then (fn [success]
                 (when success
                   (load-conflicts-paginated! ctx 0 20))
                 success)))
    success-message))

;; Delete conflict
(defn delete-conflict! [ctx id]
  (when id
    (delete-conflict-generic! ctx db/delete-sync-conflict "Зөрчлийг амжилттай устгалаа" id)))

;; Delete conflicts by note id
(defn delete-conflicts-by-note-id! [ctx note-id]
  (when note-id
    (delete-conflict-generic! ctx db/delete-sync-conflicts-by-note-id "Зөрчлүүдийг амжилттай устгалаа" note-id)))

;; Load more conflicts
(defn load-more-conflicts! [ctx]
  (helpers/load-more-helper! ctx conflict-state
                             (fn [page page-size]
                               (db/get-sync-conflicts-paginated page page-size))))

;; Set filter resolution
(defn set-filter-resolution! [resolution]
  (swap! conflict-state assoc :filter-resolution resolution))

;; Set filter type
(defn set-filter-type! [conflict-type]
  (swap! conflict-state assoc :filter-type conflict-type))

;; Clear filters
(defn clear-filters! []
  (swap! conflict-state assoc :filter-resolution nil :filter-type nil))

;; Apply filters with better logic
(defn apply-filters! [ctx]
  (let [resolution (:filter-resolution @conflict-state)
        conflict-type (:filter-type @conflict-state)]
    (cond
      (and resolution conflict-type)
      (load-conflicts-by-resolution! ctx resolution)

      resolution
      (load-conflicts-by-resolution! ctx resolution)

      conflict-type
      (load-conflicts-by-type! ctx conflict-type)

      :else
      (load-all-conflicts! ctx))))

;; ===== Conflict Resolution Helpers =====

;; Auto-resolve conflict with local wins
(defn resolve-local-wins! [ctx id]
  (when id
    (resolve-conflict! ctx id "local_wins" :description "Автоматаар шийдэгдсэн - Локал өгөгдөл хүрэлцэх")))

;; Auto-resolve conflict with remote wins
(defn resolve-remote-wins! [ctx id]
  (when id
    (resolve-conflict! ctx id "remote_wins" :description "Автоматаар шийдэгдсэн - Алсын өгөгдөл хүрэлцэх")))

;; Auto-resolve conflict with merge
(defn resolve-merge! [ctx id merged-data]
  (when (and id merged-data)
    (-> (db/update-sync-conflict-resolution id "merged" :description "Автоматаар шийдэгдсэн - Нэгтгэсэн")
        (.then (fn [success]
                 (when success
                   (let [updated-conflicts (map (fn [conflict]
                                                  (if (= (:id conflict) id)
                                                    (assoc conflict
                                                           :resolution "merged"
                                                           :resolvedData merged-data
                                                           :resolvedAt (DateTime/now))
                                                    conflict))
                                                (:conflicts @conflict-state))]
                     (swap! conflict-state assoc :conflicts updated-conflicts)))
                 success)))))

;; ===== State Queries =====

;; Get conflicts
(defn get-conflicts []
  (:conflicts @conflict-state))

;; Get current conflict
(defn get-current-conflict []
  (:current-conflict @conflict-state))

;; Set current conflict
(defn set-current-conflict! [conflict]
  (swap! conflict-state assoc :current-conflict conflict))

;; Get pending count
(defn get-pending-count []
  (:pending-count @conflict-state))

;; Get total count
(defn get-total-count []
  (:total-count @conflict-state))

;; Get conflict summary
(defn get-conflict-summary []
  (:conflict-summary @conflict-state))

;; Check if has pending conflicts
(defn has-pending-conflicts? []
  (> (:pending-count @conflict-state) 0))

;; Get conflicts by resolution
(defn get-conflicts-by-resolution [resolution]
  (filter (fn [conflict] (= (:resolution conflict) resolution))
          (:conflicts @conflict-state)))

;; Get conflicts by type
(defn get-conflicts-by-type [conflict-type]
  (filter (fn [conflict] (= (:conflictType conflict) conflict-type))
          (:conflicts @conflict-state)))

;; ===== Utility Functions =====

;; Get conflict description
(defn get-conflict-description [conflict]
  (or (:description conflict)
      (str "Зөрчлийн төрөл: " (:conflictType conflict))))

;; Get conflict status text
(defn get-conflict-status-text [conflict]
  (case (:resolution conflict)
    "pending" "Хүлээгдэж буй"
    "local_wins" "Локал хүрэлцэх"
    "remote_wins" "Алсын хүрэлцэх"
    "merged" "Нэгтгэсэн"
    "Хүлээгдэж буй"))

;; Get conflict type text
(defn get-conflict-type-text [conflict]
  (case (:conflictType conflict)
    "version_conflict" "Хувилбарын зөрчөл"
    "deletion_conflict" "Устгах зөрчөл"
    "merge_conflict" "Нэгтгэх зөрчөл"
    "Хүлээгдэж буй"))

;; ===== State Reset =====

;; Reset conflict state
(defn reset-conflict-state! []
  (reset! conflict-state
          (helpers/create-base-state
           {:conflicts []
            :current-conflict nil
            :pending-count 0
            :total-count 0
            :conflict-summary {}
            :filter-resolution nil
            :filter-type nil})))

;; Refresh conflict state with better error handling
(defn refresh-conflict-state! [ctx]
(load-all-conflicts! ctx)
(load-conflict-summary! ctx)
  )


