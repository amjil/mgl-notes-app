(ns notes-app.states.search
  (:require
   [notes-app.states.database :as db]
   [clojure.string :as str])
  (:import [dart:core DateTime]))

;; Search operations state management

(defn search-notes! [query]
  (swap! db/search-state assoc :searching true :error nil :query query)
  (try
    (let [db-service (:database-service @db/db-state)
          results (await (.searchNotes db-service query))]
      (swap! db/search-state assoc
             :results results
             :searching false
             :last-search (DateTime/now)))
    (catch :default e
      (swap! db/search-state assoc
             :searching false
             :error (str "Search failed: " e)))))

(defn search-blocks! [query]
  (swap! db/search-state assoc :searching true :error nil :query query)
  (try
    (let [db-service (:database-service @db/db-state)
          results (await (.searchBlocks db-service query))]
      (swap! db/search-state assoc
             :results results
             :searching false
             :last-search (DateTime/now)))
    (catch :default e
      (swap! db/search-state assoc
             :searching false
             :error (str "Search failed: " e)))))

;; Paginated search methods
(defn search-notes-paginated! [query & {:keys [page page-size append?]}]
  (db/search-notes-paginated! query :page page :page-size page-size :append? append?))

(defn search-blocks-paginated! [query & {:keys [page page-size append?]}]
  (db/search-blocks-paginated! query :page page :page-size page-size :append? append?))

;; Load more search results
(defn load-more-search-results! []
  (db/load-more-search-results!))

(defn clear-search! []
  (db/clear-search!))

;; Query functions
(defn get-search-query []
  (db/get-search-query))

(defn get-search-results []
  (db/get-search-results-from-state))

(defn is-searching? []
  (db/is-searching?))

(defn get-search-error []
  (db/get-search-error))

(defn get-last-search-time []
  (db/get-last-search-time))

;; Pagination-related query functions
(defn get-search-current-page []
  (db/get-search-current-page))

(defn get-search-page-size []
  (db/get-search-page-size))

(defn get-search-total-count []
  (db/get-search-total-count))

(defn get-search-has-more []
  (db/get-search-has-more))

(defn get-search-loading-more []
  (db/get-search-loading-more))

;; Pagination state check functions
(defn should-load-more? []
  (and (get-search-has-more)
       (not (get-search-loading-more))
       (not (str/blank? (get-search-query)))))

(defn get-search-pagination-info []
  {:current-page (get-search-current-page)
   :page-size (get-search-page-size)
   :total-count (get-search-total-count)
   :has-more (get-search-has-more)
   :loading-more (get-search-loading-more)})