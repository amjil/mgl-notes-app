(ns notes-app.states.database
  (:require
   [clojure.string :as str] 
   ["package:cljd_mgl_notes_app/providers/database_provider.dart" :as db-provider]))

;; ===== Database State Management =====
;; Focused on database-related state management
;; Does not include UI state, UI state is separated to ui.cljd

;; ===== Unified Data State Management =====
;; Avoid state duplication, unified management of all business data states

;; Database connection state
(def db-state
  (atom {:initialized false
         :loading false
         :error nil
         :database nil
         :database-service nil}))

;; Unified data state - contains all business data
(def data-state
  (atom {:notes []
         :current-note nil
         :blocks []
         :current-block nil
         :tags []
         :selected-tags []
         :search-results []
         :pending-sync []
         :loading false
         :error nil
         :last-updated nil
         :loading-more false
         :current-page 1
         :page-size 20
         :total-count 0
         :has-more false}))

;; Search state
(def search-state
  (atom {:query ""
         :results []
         :often-search-queries []
         :often-used-tags []
         :searching false
         :loading-more false
         :error nil
         :last-search nil
         :current-page 1
         :page-size 20
         :total-count 0
         :has-more false}))

;; Sync state
(def sync-state
  (atom {:pending-sync []
         :syncing false
         :last-sync nil
         :error nil}))

;; Statistics state
(def stat-state
  (atom {:note-counts {}
         :note-counts-by-tag {}}))

;; ===== Backward Compatible State Aliases =====
;; For maintaining compatibility with existing code, provide state aliases

(def notes-state data-state)
(def blocks-state data-state)
(def tags-state data-state)

;; ===== Database Initialization =====

;; Initialize database
(defn initialize-database! []
  (swap! db-state assoc :loading true :error nil)
  (-> (db-provider/initialize-database)
      (.then (fn [result]
               (swap! db-state assoc 
                      :initialized true
                      :loading false
                      :database (:database result)
                      :database-service (:database-service result))))
      (.catchError (fn [error]
                     (swap! db-state assoc 
                            :loading false
                            :error (str error))))))

;; Get database service
(defn get-database-service []
  (:database-service @db-state))

;; Get database instance
(defn get-database []
  (:database @db-state))

;; Check if database is initialized
(defn is-database-initialized? []
  (:initialized @db-state))

;; Check if database is loading
(defn is-database-loading? []
  (:loading @db-state))

;; Get database error
(defn get-database-error []
  (:error @db-state))

;; ===== Database State Queries =====

;; Get database state
(defn get-database-state []
  @db-state)

;; Get data state
(defn get-data-state []
  @data-state)

;; Get search state
(defn get-search-state []
  @search-state)

;; Get sync state
(defn get-sync-state []
  @sync-state)

;; Get statistics state
(defn get-stat-state []
  @stat-state)

;; ===== Database State Reset =====

;; Reset database state
(defn reset-database-state! []
  (reset! db-state {:initialized false
                    :loading false
                    :error nil
                    :database nil
                    :database-service nil}))

;; Reset data state
(defn reset-data-state! []
  (reset! data-state {:notes []
                      :current-note nil
                      :blocks []
                      :current-block nil
                      :tags []
                      :selected-tags []
                      :search-results []
                      :pending-sync []
                      :loading false
                      :error nil
                      :last-updated nil
                      :loading-more false
                      :current-page 1
                      :page-size 20
                      :total-count 0
                      :has-more false}))

;; Reset search state
(defn reset-search-state! []
  (reset! search-state {:query ""
                        :results []
                        :often-search-queries []
                        :often-used-tags []
                        :searching false
                        :loading-more false
                        :error nil
                        :last-search nil
                        :current-page 1
                        :page-size 20
                        :total-count 0
                        :has-more false}))

;; Reset sync state
(defn reset-sync-state! []
  (reset! sync-state {:pending-sync []
                      :syncing false
                      :last-sync nil
                      :error nil}))

;; Reset all states
(defn reset-app-state! []
  (reset-database-state!)
  (reset-data-state!)
  (reset-search-state!)
  (reset-sync-state!))