(ns notes-app.states.blocks
  (:require
   [notes-app.services.db :as db]
   [notes-app.utils.toast :as toast]
   [notes-app.utils.state-helpers :as helpers]
   [notes-app.states.stats :as stats]))

;; Blocks State Management
;; Responsible for managing blocks-related states, including blocks list, current block, etc.

;; Blocks State
(def blocks-state
  (atom
   (helpers/create-base-state
    {:blocks []
     :current-block nil})))

;; ===== Blocks State Operations =====

;; Load blocks by note id
(defn load-blocks-by-note-id! [ctx note-id]
  (helpers/with-loading-state! ctx blocks-state
    (-> (db/get-blocks-by-note-id note-id)
        (.then (fn [blocks]
                 (swap! blocks-state assoc :blocks blocks :loading false))))))

;; Create block
(defn create-block! [ctx note-id content]
  (helpers/with-success-toast! ctx blocks-state
    (-> (db/create-block note-id content)
        (.then (fn [block]
                 (swap! blocks-state assoc
                        :blocks (conj (:blocks @blocks-state) block)
                        :loading false)
                 (stats/on-block-created!)
                 block)))
    "Блок амжилттай үүслээ"))

;; Update block
(defn update-block! [ctx id content]
  (helpers/with-success-toast! ctx blocks-state
    (-> (db/update-block id content)
        (.then (fn [success]
                 (when success
                   (let [updated-blocks (map (fn [block]
                                              (if (= (:id block) id)
                                                (assoc block :content content)
                                                block))
                                            (:blocks @blocks-state))]
                     (swap! blocks-state assoc :blocks updated-blocks)))
                 success)))
    "Блок амжилттай шинэчлэгдлээ"))

;; Delete block
(defn delete-block! [ctx id]
  (helpers/with-success-toast! ctx blocks-state
    (-> (db/delete-block id)
        (.then (fn [success]
                 (when success
                   (swap! blocks-state assoc
                          :blocks (filter #(not= (:id %) id) (:blocks @blocks-state)))
                   (stats/on-block-deleted!))
                 success)))
    "Блок амжилттай устгагдлаа"))

;; Get block by id
(defn get-block-by-id! [ctx id]
  (helpers/with-loading-state! ctx blocks-state
    (-> (db/get-block-by-id id)
        (.then (fn [block]
                 (swap! blocks-state assoc :current-block block :loading false))))))

;; Set current block
(defn set-current-block! [block]
  (swap! blocks-state assoc :current-block block))

;; Clear current block
(defn clear-current-block! []
  (swap! blocks-state assoc :current-block nil))

;; Search blocks
(defn search-blocks! [ctx query page & [page-size]]
  (let [limit (or page-size 20)]
    (helpers/with-loading-state! ctx blocks-state
      (-> (db/search-blocks query page limit)
          (.then (fn [blocks]
                   (helpers/handle-pagination-result! blocks-state page blocks limit)))))))

;; ===== Blocks State Queries =====

;; Get blocks state
(defn get-blocks-state []
  (helpers/get-state blocks-state))

;; Get blocks list
(defn get-blocks []
  (:blocks @blocks-state))

;; Get current block
(defn get-current-block []
  (:current-block @blocks-state))

;; Check if loading
(defn is-loading? []
  (helpers/is-loading? blocks-state))

;; Check if loading more
(defn is-loading-more? []
  (helpers/is-loading-more? blocks-state))

;; Check if has more
(defn has-more? []
  (helpers/has-more? blocks-state))

;; Get error
(defn get-error []
  (helpers/get-error blocks-state))

;; Get current page
(defn get-current-page []
  (helpers/get-current-page blocks-state))

;; Get total count
(defn get-total-count []
  (helpers/get-total-count blocks-state))

;; Get blocks by note id
(defn get-blocks-by-note-id [note-id]
  (filter #(= (:noteId %) note-id) (:blocks @blocks-state)))

;; ===== Blocks State Reset =====

;; Reset blocks state
(defn reset-blocks-state! []
  (helpers/reset-state! blocks-state
    {:blocks []
     :current-block nil}))