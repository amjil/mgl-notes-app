(ns notes-app.states.tags
  (:require
   [notes-app.states.database :as db])
  (:import [dart:core DateTime]))

;; Tags operations state management

(defn load-tags []
  (swap! db/tags-state assoc :loading true :error nil)
  (try
    (let [db-service (:database-service @db/database-state)
          tags (await (.getAllTags db-service))]
      (swap! db/tags-state assoc
             :tags tags
             :loading false
             :last-updated (DateTime/now)))
    (catch :default e
      (swap! db/tags-state assoc
             :loading false
             :error (str "Failed to load tags: " e)))))

(defn create-tag [name]
  (swap! db/tags-state assoc :loading true :error nil)
  (try
    (let [db-service (:database-service @db/database-state)
          tag-id (await (.createTagSimple db-service name))]
      (load-tags) ; Reload tags list
      tag-id)
    (catch :default e
      (swap! db/tags-state assoc
             :loading false
             :error (str "Failed to create tag: " e))
      nil)))

(defn add-tag-to-note [note-id tag-id]
  (try
    (let [db-service (:database-service @db/database-state)
          success (await (.addTagToNote db-service note-id tag-id))]
      success)
    (catch :default e
      false)))

(defn remove-tag-from-note [note-id tag-id]
  (try
    (let [db-service (:database-service @db/database-state)
          success (await (.removeTagFromNote db-service note-id tag-id))]
      success)
    (catch :default e
      false)))

(defn set-selected-tags [tags]
  (swap! db/tags-state assoc :selected-tags tags))

(defn get-tag-by-id [id]
  (first (filter (fn [tag] (= (:id tag) id)) (db/get-tags))))

(defn get-tag-by-name [name]
  (first (filter (fn [tag] (= (:name tag) name)) (db/get-tags))))

(defn get-tags-count []
  (count (db/get-tags)))

(defn get-popular-tags [limit]
  (take limit (sort-by :count > (db/get-tags))))

(defn search-tags [query]
  (filter (fn [tag] (clojure.string/includes? (:name tag) query)) (db/get-tags)))

(defn get-tags-for-note [note-id]
  (try
    (let [db-service (:database-service @db/database-state)
          tags (await (.getTagsByNoteId db-service note-id))]
      tags)
    (catch :default e
      [])))