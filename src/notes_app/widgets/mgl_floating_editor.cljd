(ns notes-app.widgets.mgl-floating-editor
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:lifecycle/lifecycle.dart" :as lifecycle]
   [cljd.flutter :as f]
   [clojure.string :as str]
   [notes-app.states.notes :as notes]
   [notes-app.widgets.mgl-input-editor :as mgl-input-editor]
   [notes-app.utils.toast :as toast]))

(declare save-note)

(def has-changed-atom (atom false))

(defn floating-editor-dialog [context]
  (f/widget
   :context ctx
   :let [screen-height (-> m/MediaQuery (.of ctx) .-size .-height)
         screen-width (-> m/MediaQuery (.of ctx) .-size .-width)
         theme (-> m/Theme (.of ctx))
         color-scheme (.-colorScheme theme)]
   :watch [has-changed has-changed-atom]
   :managed [controller (m/TextEditingController. .text (if (notes/get-current-note) (get (notes/get-current-note) "content") ""))]
   (lifecycle/LifecycleWrapper
    .onLifecycleEvent (fn [event]
                        (condp = event
                          ;; TODO handle lifecycle events for saving note
                          lifecycle/LifecycleEvent.pop nil
                          lifecycle/LifecycleEvent.invisible nil
                          nil)
                        (dart:core/print (str "onLifecycleEvent: " event)))
    .child
    (m/Dialog
     .backgroundColor m/Colors.transparent
     .insetPadding (m/EdgeInsets.zero)
     .child
     (m/Container
      .height screen-height
      .width screen-width
      .decoration (m/BoxDecoration
                   .color (.-surface color-scheme))
      .child
      (m/Column
       .children
       [(m/Container
         .padding (m/EdgeInsets.all 0)
         .decoration (m/BoxDecoration
                      .color (.-surfaceVariant color-scheme)
                      .border (m/Border
                               .bottom (m/BorderSide
                                        .color (.-outline color-scheme)
                                        .width 1)))
         .child
         (m/Row
          .mainAxisAlignment m/MainAxisAlignment.spaceBetween
          .children
          [(m/IconButton
            .icon (m/Icon m/Icons.save)
            .color (if has-changed
                     (.-onPrimary color-scheme)
                     (.-onSurfaceVariant color-scheme))
            .style (m/ButtonStyle
                    .backgroundColor (m/MaterialStateProperty.all
                                      (if has-changed
                                        (.-primary color-scheme)
                                        (.-surfaceVariant color-scheme))))
            .onPressed (fn [] (save-note context controller)))
           (m/IconButton
            .icon (m/Icon m/Icons.close)
            .color (.-onSurface color-scheme)
            .style (m/ButtonStyle
                    .backgroundColor (m/MaterialStateProperty.all (.-surfaceVariant color-scheme)))
            .onPressed (fn [] (-> m/Navigator (.of context) (.pop))))]))
        (m/Expanded
         .child
         (mgl-input-editor/input-editor
          {:controller controller
           :on-changed (fn [_]
                         (when (not= @has-changed-atom true)
                           (reset! has-changed-atom true)))
           :auto-focus true}))]))))))

(defn show-floating-editor [context]
  (m/showDialog
   .context context
   .builder (fn [context]
              (floating-editor-dialog context))))

(defn floating-editor-button [context]
  (f/widget
   (m/FloatingActionButton
    .onPressed (fn [] (show-floating-editor context))
    .child (m/Icon m/Icons.add)
    .tooltip "Шинэ тэмдэглэл"))) 

(defn save-note [context controller & [old-blocks]]
  (let [content (.-text controller)]
    ;; Check if content is empty
    (if (or (nil? content) (empty? (str/trim content)))
      (toast/show-toast context "Тэмдэглэл оруулна уу")
      ;; Has content, proceed with saving
      (if (nil? (notes/get-current-note))
        (notes/create-note-with-content!
         context content
         (fn []
           (-> m/Navigator (.of context) (.pop))
           (reset! has-changed-atom false)))

        (let [note-id (-> (notes/get-current-note) (get "id"))]
          (notes/update-note-with-content!
           context note-id content
           (fn []
             (-> m/Navigator (.of context) (.pop))
             (reset! has-changed-atom false))))))))