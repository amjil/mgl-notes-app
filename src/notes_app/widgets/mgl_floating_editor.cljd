(ns notes-app.widgets.mgl-floating-editor
  (:require
   ["package:flutter/material.dart" :as m]
   [cljd.flutter :as f]
   [notes-app.states.notes :as note]
   [notes-app.states.database :as db]
   [notes-app.widgets.mgl-input-editor :as mgl-input-editor]))

(declare save-note)

(def has-changed-atom (atom false))

(defn floating-editor-dialog [context]
  (f/widget
   :context ctx
   :let [screen-height (-> m/MediaQuery (.of ctx) .-size .-height)
         screen-width (-> m/MediaQuery (.of ctx) .-size .-width)
         theme (-> m/Theme (.of ctx))
         color-scheme (.-colorScheme theme)] 
   :watch [has-changed has-changed-atom]
   :managed [controller (m/TextEditingController.)]
   (m/Dialog
    .backgroundColor m/Colors.transparent
    .insetPadding (m/EdgeInsets.zero)
    .child
    (m/Container
     .height screen-height
     .width screen-width
     .decoration (m/BoxDecoration
                  .color (.-surface color-scheme))
     .child
     (m/Column
      .children
      [(m/Container
        .padding (m/EdgeInsets.all 0)
        .decoration (m/BoxDecoration
                     .color (.-surfaceVariant color-scheme)
                     .border (m/Border
                              .bottom (m/BorderSide
                                       .color (.-outline color-scheme)
                                       .width 1)))
        .child
        (m/Row
         .mainAxisAlignment m/MainAxisAlignment.spaceBetween
         .children
         [(m/IconButton
           .icon (m/Icon m/Icons.save)
           .color (if has-changed
                    (.-onPrimary color-scheme)
                    (.-onSurfaceVariant color-scheme))
           .style (m/ButtonStyle
                   .backgroundColor (m/MaterialStateProperty.all
                                     (if has-changed
                                       (.-primary color-scheme)
                                       (.-surfaceVariant color-scheme))))
           .onPressed (fn [] (save-note context controller)))
          (m/IconButton
           .icon (m/Icon m/Icons.close)
           .color (.-onSurface color-scheme)
           .style (m/ButtonStyle
                   .backgroundColor (m/MaterialStateProperty.all (.-surfaceVariant color-scheme)))
           .onPressed (fn [] (-> m/Navigator (.of context) (.pop))))]))
       (m/Expanded
        .child
        (mgl-input-editor/input-editor
         {:controller controller
          :on-changed (fn [_]
                        (when (not= @has-changed-atom true)
                          (reset! has-changed-atom true)))
          :auto-focus true}))])))))

(defn show-floating-editor [context]
  (m/showDialog
   .context context
   .builder (fn [context]
              (floating-editor-dialog context))))

(defn floating-editor-button [context]
  (f/widget
   (m/FloatingActionButton
    .onPressed (fn [] (show-floating-editor context))
    .child (m/Icon m/Icons.add)
    .tooltip "Шинэ тэмдэглэл"))) 

(defn save-note [context controller & [old-blocks]]
  (let [content (.-text controller)]
    (dart:core/print (str "Save button clicked! Content: " content))

    ;; Database is ready, proceed with save
    (if old-blocks
      ;; Async call for existing note
      (do
        (dart:core/print "Saving existing note with blocks...")
        (let [save-result (note/save-note-with-blocks! content old-blocks)]
          (if save-result
            (-> save-result
                (.then (fn [result]
                         (dart:core/print (str "Save result: " result))
                         (when (:success result)
                           ;; Reset state and close dialog
                           (reset! has-changed-atom false)
                           (-> m/Navigator (.of context) (.pop))
                           ;; Optional: show success message
                           (when (:error result)
                             (dart:core/print (str "Error saving note: " (:error result)))))))
                (.catchError (fn [error]
                               (dart:core/print (str "Error in save operation: " error)))))
            (dart:core/print "Database service not available"))))
      ;; Async call for new note
      (do
        (dart:core/print "Creating new note...")
        (let [save-result (note/save-note-with-blocks! content [])]
          (if save-result
            (-> save-result
                (.then (fn [result]
                         (dart:core/print (str "Save result: " result))
                         (when (:success result)
                           ;; Reset state and close dialog
                           (reset! has-changed-atom false)
                           (-> m/Navigator (.of context) (.pop))
                           ;; Optional: show success message
                           (when (:error result)
                             (dart:core/print (str "Error saving note: " (:error result)))))))
                (.catchError (fn [error]
                               (dart:core/print (str "Error in save operation: " error)))))
            (dart:core/print "Database service not available")))))))

(defn on-save [context old-blocks controller]
  (save-note context controller old-blocks))