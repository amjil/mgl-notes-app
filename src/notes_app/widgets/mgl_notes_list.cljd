(ns notes-app.widgets.mgl-notes-list
  (:require
   ["package:flutter/material.dart" :as m]
   [cljd.flutter :as f]
   [notes-app.widgets.mgl-note-item :as note-item]
   [notes-app.widgets.mgl-infinite-scroll :as infinite-scroll]
   [notes-app.widgets.mgl-empty-state :as empty-state]
   [notes-app.widgets.mgl-loading-state :as loading-state]
   [notes-app.states.database :as db]))

;; ==================== Notes list specific functions ====================

;; Check if should trigger load more for notes
(defn should-load-more-notes? []
  (and (db/get-notes-has-more)
       (not (db/get-notes-loading-more))))

;; Load more notes trigger function
(defn load-more-notes-trigger []
  (when (should-load-more-notes?)
    (db/load-more-notes!)))

;; Note item builder
(defn note-item-builder [note]
  (note-item/note-item note))

;; ==================== Notes list widget ====================

;; Notes list with infinite scroll
(defn notes-list []
  (f/widget
   :watch [{notes :notes
            loading :loading
            loading-more :loading-more
            has-more :has-more
            all-loaded :all-loaded} db/notes-state]
   :managed [scroll-controller (infinite-scroll/create-scroll-controller load-more-notes-trigger)]
   (if loading
     (loading-state/loading-indicator-themed)
     (if (empty? notes)
       (empty-state/empty-notes)
       (infinite-scroll/infinite-scroll-list
        {:items notes
         :scroll-controller scroll-controller
         :scroll-direction m/Axis.horizontal
         :item-builder note-item-builder
         :loading-more? loading-more
         :has-more? has-more
         :all-loaded? all-loaded
         :load-more-indicator (infinite-scroll/load-more-indicator infinite-scroll/loading-more-text)
         :all-loaded-indicator (infinite-scroll/all-loaded-indicator infinite-scroll/all-loaded-text)})))))

;; ==================== Container widget ====================

;; Notes list container
(defn notes-list-container []
  (f/widget
   (m/Expanded
    .child (notes-list))))