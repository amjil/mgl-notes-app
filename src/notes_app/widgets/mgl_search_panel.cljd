(ns notes-app.widgets.mgl-search-panel
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   [clojure.string :as str]
   [notes-app.widgets.mgl-keyboard :as keyboard]
   [notes-app.widgets.mgl-suggestion-panel :as suggestion-panel]
   [notes-app.widgets.mgl-note-item :as note-item]
   [notes-app.widgets.mgl-infinite-scroll :as infinite-scroll]
   [notes-app.widgets.mgl-text-input :as text-input]
   [notes-app.widgets.mgl-empty-state :as empty-state]
   [notes-app.widgets.mgl-chip :as chip]
   [notes-app.states.ui :as ui]
   [notes-app.states.search :as search-state]
   [cljd.flutter :as f]))

;; ==================== Search specific functions ====================

;; Check if should trigger load more for search results
(defn should-load-more-search? []
  (search-state/has-more?))

;; Load more search results trigger function
(defn load-more-search-trigger [ctx]
  (when (should-load-more-search?)
    (search-state/load-more-search-results! ctx)))

;; Search result item builder
(defn search-result-item-builder [result]
  (cond
    ;; If the result is nil, show the empty label
    (nil? result)
    (m/Column
     .children
     [(mgl/MongolText "Notes --- ")])

    ;; If the result is a note, show the note item
    (empty? (-> result .-data (get "name")))
    (note-item/note-item result)

    ;; If the result is a tag, show the tag item
    :else
    (m/Padding .padding (m/EdgeInsets.only .right 16 .top 16 .bottom 16)
               .child
               (m/Row
                .crossAxisAlignment m/CrossAxisAlignment.start
                .children
                [(mgl/MongolText "Tags --- ")
                 (m/Wrap
                  .direction m/Axis.vertical
                  .spacing 8
                  .children [(chip/mgl-chip (-> result .-data (get "name")) #(dart:core/print (str "tag: ")))])
                 (mgl/MongolText "Notes --- ")]))))

;; Handle search input change
(defn handle-search-change [ctx val]
  ;; Update search query in global state
  (swap! search-state/search-state assoc :query val)

  ;; Search tags
  (when (not (str/blank? val))
    (search-state/search-tags! val 0 20))

  ;; Perform search with pagination
  (when (not (str/blank? val))
    (search-state/search-notes! ctx val 0 20))

  ;; Clear search results if query is empty
  (when (str/blank? val)
    (search-state/clear-search-results!)))

;; Handle search input tap
(defn handle-search-tap []
  (swap! ui/ui-state assoc :keyboard/candidates-list [])
  (dart:core/print "onTap MongolTextField"))

;; ==================== Search result panel widget ====================

;; Search result panel with infinite scroll
(defn search-result-panel []
  (f/widget
   :watch [{search-results :results
            search-results-of-tags :results-of-tags
            search-query :query
            loading-more :loading-more
            has-more :has-more} search-state/search-state]
   :managed [scroll-controller (infinite-scroll/create-scroll-controller load-more-search-trigger)]
   (cond
     (str/blank? search-query)
     ;; Initial state, show blank area
     (suggestion-panel/suggestion-panel)

     ;; Already has search content, show list regardless of whether results are empty
     (empty? search-results)
     (empty-state/empty-search-results)

     :else
     (infinite-scroll/infinite-scroll-list
      {:items (concat (if (empty? search-results-of-tags)
                        [nil]
                        search-results-of-tags)
                      search-results)
       :scroll-controller scroll-controller
       :scroll-direction m/Axis.horizontal
       :item-builder search-result-item-builder
       :loading-more? loading-more
       :has-more? has-more
       :load-more-indicator (infinite-scroll/load-more-indicator infinite-scroll/search-loading-more-text)
       :all-loaded-indicator (infinite-scroll/all-loaded-indicator infinite-scroll/search-all-loaded-text)}))))

;; ==================== Search panel widget ====================

;; Search panel with enhanced functionality
(defn search-panel []
  (f/widget
   :context ctx
   :managed [controller (m/TextEditingController.)]
   (m/SafeArea)
   (m/Stack
    .children
    [(m/Column
      .children
      [(m/Expanded
        .child
        (m/Row
         .crossAxisAlignment m/CrossAxisAlignment.stretch
         .children
         [(text-input/search-text-field controller (partial handle-search-change ctx) handle-search-tap)
          (m/Expanded
           .child (search-result-panel))]))
       (keyboard/keyboard)])
     (keyboard/candidates-panel)]))) 