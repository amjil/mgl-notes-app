(ns notes-app.widgets.mgl-note-item
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   [cljd.flutter :as f]
   [notes-app.widgets.mgl-popup-menu :as popup-menu]
   [notes-app.widgets.mgl-note-viewer :as note-viewer]
   [notes-app.widgets.mgl-floating-editor :as floating-editor]
   [notes-app.utils.clipboard :as clipboard-utils]
   [notes-app.states.notes :as notes]
   [notes-app.states.ui :as ui]))

;; Create generic menu item function
(defn create-note-menu-items [ctx note]
  [(popup-menu/mongol-menu-item
    {:label "Засах"
     :icon m/Icons.edit
     :on-selected (fn []
                    (notes/set-current-note! note)
                    (floating-editor/show-floating-editor ctx))})
   (popup-menu/mongol-menu-item
    {:label "Хуулах"
     :icon m/Icons.copy
     :on-selected (fn []
                    (clipboard-utils/set-data (get note "content")))})
   (popup-menu/mongol-menu-item-divider)
   (popup-menu/mongol-menu-item
    {:label "Устгах"
     :icon m/Icons.delete
     :on-selected (fn []
                    (let [global-context (.-currentContext (ui/get-scaffold-key))]
                      (notes/delete-note! global-context (get note "id"))))})])

;; Function to show popup menu
(defn show-note-popup-menu [ctx details note]
  (let [menu-items (create-note-menu-items ctx note)]
    (popup-menu/show-menu
     {:context ctx
      :items menu-items
      :detail details
      :on-item-selected (fn [menu-item]
                          (dart:core/print (str "Menu item selected: " (get menu-item :label))))})))

(defn note-item [item]
  (f/widget
   :context ctx
   :let [theme (-> m/Theme (.of ctx))
         color-scheme (.-colorScheme theme)
         is-dark? (= (.-brightness color-scheme) m/Brightness.dark)
         bg-color (.-surface color-scheme)
         title-color (.-onSurface color-scheme)
         preview-color (.-onSurfaceVariant color-scheme)
         border-color (.-outline color-scheme)
         shadow-color (.-shadow color-scheme)
         item (.-data item)
         note-id (get item "id")
         note-title (get item "title")
         note-content (get item "content")
         title-index (if (nil? note-content)
                       -1
                       (.indexOf note-content "\n"))
         note-content (if (> title-index 0)
                        (subs note-content title-index)
                        nil)]
   (m/Card
    .color bg-color
    .margin (m/EdgeInsets.all 12)
    .shape (m/RoundedRectangleBorder 
             .borderRadius (m/BorderRadius.circular 16)
             .side (m/BorderSide .color border-color .width 1))
    .elevation (if is-dark? 2 4)
    .shadowColor shadow-color)
   (m/Padding
    .padding (m/EdgeInsets.all 16))
   (m/Column
    .children
    [(popup-menu/mongol-popup-menu-button
      {:items (create-note-menu-items ctx item)
       :on-selected (fn [menu-item]
                      (dart:core/print (str "Menu item selected: " (get menu-item :label))))})

     (m/SizedBox .width 8)
     (m/Expanded
      .child
      (m/GestureDetector
       .onLongPressStart (fn [details] (show-note-popup-menu ctx details item))
       .onDoubleTap (fn []
                      (dart:core/print (str "Note item double tapped: " note-id))
                      (notes/set-current-note! item)
                      (floating-editor/show-floating-editor ctx))
       .onTap (fn []
                (dart:core/print (str "Note item tapped: " note-id))
                (notes/set-current-note! item)
                (note-viewer/show-diaglog ctx))
       .child
       (mgl/MongolListTile
        .title (when note-title
                 (mgl/MongolText note-title
                                 .style (m/TextStyle 
                                          .fontSize 18
                                          .fontWeight m/FontWeight.bold
                                          .color title-color
                                          .height 1.2)))
        .subtitle (when note-content
                    (mgl/MongolText note-content
                                    .maxLines 3
                                    .style (m/TextStyle 
                                             .fontSize 14
                                             .color preview-color
                                             .height 1.4))))))])))