(ns notes-app.services.database
  (:require
   ["package:cljd_mgl_notes_app/services/database_service.dart" :as db]))

;; Database service
;; Provides interface for interaction with Isar database

;; ==================== Private fields ====================
(def isar-instance (atom nil))

;; ==================== Database initialization ====================

;; Initialize database
(defn init-database []
  (await (db.DatabaseService/initDatabase)))

;; Get database instance
(defn get-isar []
  @isar-instance)

;; Close database
(defn close-database []
  (await (db.DatabaseService/closeDatabase)))

;; ==================== Note operations ====================

;; Create new note
(defn create-note [note-data]
  (await (db.DatabaseService/createNote 
          :title (:title note-data)
          :tags (:tags note-data)
          :scheduledDate (:scheduledDate note-data))))

;; Get note by ID
(defn get-note [id]
  (await (db.DatabaseService/getNote id)))

;; Update note
(defn update-note [note]
  (await (db.DatabaseService/updateNote note)))

;; Delete note
(defn delete-note [id]
  (await (db.DatabaseService/deleteNote id)))

;; Get all notes
(defn get-all-notes []
  (await (db.DatabaseService/getAllNotes)))

;; Get all notes with pagination
(defn get-all-notes-paginated [& {:keys [page pageSize]
                                 :or {page 1 pageSize 20}}]
  (await (db.DatabaseService/getAllNotesPaginated
          :page page
          :pageSize pageSize)))

;; Get notes by date
(defn get-notes-by-date [date]
  (await (db.DatabaseService/getNotesByDate date)))

;; Get notes by date with pagination
(defn get-notes-by-date-paginated [date & {:keys [page pageSize]
                                          :or {page 1 pageSize 20}}]
  (await (db.DatabaseService/getNotesByDatePaginated
          date
          :page page
          :pageSize pageSize)))

;; Search notes
(defn search-notes [query]
  (await (db.DatabaseService/searchNotes query)))

;; Search notes with pagination
(defn search-notes-paginated [query & {:keys [page pageSize]
                                      :or {page 1 pageSize 20}}]
  (await (db.DatabaseService/searchNotesPaginated
          query
          :page page
          :pageSize pageSize)))

;; Get notes by tag
(defn get-notes-by-tag [tag-name]
  (await (db.DatabaseService/getNotesByTag tag-name)))

;; Get notes by tag with pagination
(defn get-notes-by-tag-paginated [tag-name & {:keys [page pageSize]
                                             :or {page 1 pageSize 20}}]
  (await (db.DatabaseService/getNotesByTagPaginated
          tag-name
          :page page
          :pageSize pageSize)))

;; ==================== Block operations ====================

;; Create new block
(defn create-block [block-data]
  (await (db.DatabaseService/createBlock
          :blockId (:blockId block-data)
          :noteId (:noteId block-data)
          :content (:content block-data)
          :tags (:tags block-data))))

;; Get block by block ID
(defn get-block [block-id]
  (await (db.DatabaseService/getBlock block-id)))

;; Get block by database ID
(defn get-block-by-id [id]
  (await (db.DatabaseService/getBlockById id)))

;; Get all blocks by note ID
(defn get-blocks-by-note [note-id]
  (await (db.DatabaseService/getBlocksByNote note-id)))

;; Get blocks by ID list
(defn get-blocks-by-ids [block-ids]
  (await (db.DatabaseService/getBlocksByIds block-ids)))

;; Update block
(defn update-block [block]
  (await (db.DatabaseService/updateBlock block)))

;; Delete block
(defn delete-block [id]
  (await (db.DatabaseService/deleteBlock id)))

;; Search blocks
(defn search-blocks [query]
  (await (db.DatabaseService/searchBlocks query)))

;; Get blocks by tag
(defn get-blocks-by-tag [tag-name]
  (await (db.DatabaseService/getBlocksByTag tag-name)))

;; Get the first block of a note
(defn get-first-block-of-note [note-id]
  (await (db.DatabaseService/getFirstBlockOfNote note-id)))

;; ==================== Tag operations ====================

;; Create new tag
(defn create-tag [tag-data]
  (await (db.DatabaseService/createTag
          :name (:name tag-data))))

;; Get tag by name
(defn get-tag [name]
  (await (db.DatabaseService/getTag name)))

;; Get all tags
(defn get-all-tags []
  (await (db.DatabaseService/getAllTags)))

;; Update tag
(defn update-tag [tag]
  (await (db.DatabaseService/updateTag tag)))

;; Delete tag
(defn delete-tag [id]
  (await (db.DatabaseService/deleteTag id)))

;; Increment tag usage count
(defn increment-tag-usage [tag-name]
  (await (db.DatabaseService/incrementTagUsage tag-name)))

;; Decrement tag usage count
(defn decrement-tag-usage [tag-name]
  (await (db.DatabaseService/decrementTagUsage tag-name)))

;; ==================== Link operations ====================

;; Add link to block
(defn add-link-to-block [block-id link]
  (await (db.DatabaseService/addLinkToBlock block-id link)))

;; Remove link from block
(defn remove-link-from-block [block-id link]
  (await (db.DatabaseService/removeLinkFromBlock block-id link)))

;; Add backlink to block
(defn add-backlink-to-block [block-id backlink]
  (await (db.DatabaseService/addBacklinkToBlock block-id backlink)))

;; Remove backlink from block
(defn remove-backlink-from-block [block-id backlink]
  (await (db.DatabaseService/removeBacklinkFromBlock block-id backlink)))

;; Get blocks with links
(defn get-blocks-with-links []
  (await (db.DatabaseService/getBlocksWithLinks)))

;; Get blocks with backlinks
(defn get-blocks-with-backlinks []
  (await (db.DatabaseService/getBlocksWithBacklinks)))

;; ==================== Recycle bin operations ====================

;; Get deleted notes
(defn get-deleted-notes []
  (await (db.DatabaseService/getDeletedNotes)))

;; Get deleted blocks
(defn get-deleted-blocks []
  (await (db.DatabaseService/getDeletedBlocks)))

;; Restore note
(defn restore-note [id]
  (await (db.DatabaseService/restoreNote id)))

;; Restore block
(defn restore-block [id]
  (await (db.DatabaseService/restoreBlock id)))

;; Permanently delete note
(defn permanently-delete-note [id]
  (await (db.DatabaseService/permanentlyDeleteNote id)))

;; Permanently delete block
(defn permanently-delete-block [id]
  (await (db.DatabaseService/permanentlyDeleteBlock id)))

;; Clear recycle bin
(defn clear-recycle-bin []
  (await (db.DatabaseService/clearRecycleBin)))

;; ==================== Statistics operations ====================

;; Get daily statistics
(defn get-daily-stats [date]
  (await (db.DatabaseService/getDailyStats date)))

;; Create or update daily statistics
(defn create-or-update-daily-stats [date stats-data]
  (await (db.DatabaseService/createOrUpdateDailyStats 
          date
          :noteCount (:noteCount stats-data)
          :wordCount (:wordCount stats-data)
          :blockCount (:blockCount stats-data)
          :tags (:tags stats-data))))

;; Get statistics range
(defn get-stats-range [start-date end-date]
  (await (db.DatabaseService/getStatsRange start-date end-date)))

;; ==================== Batch operations ====================

;; Update note block IDs
(defn update-note-block-ids [note-id block-ids]
  (await (db.DatabaseService/updateNoteBlockIds note-id block-ids)))

;; Add block to note
(defn add-block-to-note [note-id block-id]
  (await (db.DatabaseService/addBlockToNote note-id block-id)))

;; Remove block from note
(defn remove-block-from-note [note-id block-id]
  (await (db.DatabaseService/removeBlockFromNote note-id block-id)))

;; Update note preview
(defn update-note-preview [note-id]
  (await (db.DatabaseService/updateNotePreview note-id)))

;; ==================== Utility functions ====================

;; Generate block ID
(defn generate-block-id []
  (db.DatabaseService/generateBlockId))

;; Extract tags from content
(defn extract-tags-from-content [content]
  (db.DatabaseService/extractTagsFromContent content))

;; Extract links from content
(defn extract-links-from-content [content]
  (db.DatabaseService/extractLinksFromContent content))

;; Calculate word count
(defn calculate-word-count [content]
  (db.DatabaseService/calculateWordCount content))

;; Calculate note total word count
(defn calculate-note-word-count [note-id]
  (await (db.DatabaseService/calculateNoteWordCount note-id)))

;; Update note word count statistics
(defn update-note-word-count [note-id]
  (await (db.DatabaseService/updateNoteWordCount note-id))) 