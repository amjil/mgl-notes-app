(ns notes-app.services.import-export
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:path_provider/path_provider.dart" :as path-provider]
   ["dart:io" :as io]
   ["dart:convert" :as convert]
   [notes-app.services.db :as db]
   [notes-app.utils.string :as string-utils]))

;; Import/Export service for notes data
;; Supports JSON format for data portability

(defn get-app-documents-directory []
  (await (path-provider/getApplicationDocumentsDirectory)))

(defn get-app-external-storage-directory []
  (await (path-provider/getExternalStorageDirectory)))

(defn create-export-directory []
  (let [dir (get-app-documents-directory)
        export-dir (io/Directory. (str (.-path dir) "/exports"))]
    (when-not (.existsSync export-dir)
      (.createSync export-dir :recursive true))
    export-dir))

(defn format-date-time [date-time]
  (let [year (.year date-time)
        month (.month date-time)
        day (.day date-time)
        hour (.hour date-time)
        minute (.minute date-time)
        second (.second date-time)]
    (str year "-" 
         (string-utils/pad-left (str month) "0" 2) "-"
         (string-utils/pad-left (str day) "0" 2) "_"
         (string-utils/pad-left (str hour) "0" 2) "-"
         (string-utils/pad-left (str minute) "0" 2) "-"
         (string-utils/pad-left (str second) "0" 2))))

(defn export-notes-to-json []
  "Export all notes with their blocks, tags, and metadata to JSON format"
  (let [notes (await (db/get-all-notes))
        export-data {:version "1.0"
                     :export-date (format-date-time (DateTime/now))
                     :app-version "1.0.0"
                     :notes []}]
    (doseq [note notes]
      (let [note-id (.-id note)
            blocks (await (db/get-blocks-by-note-id note-id))
            tags (await (db/get-note-tags note-id))
            note-data {:id note-id
                       :title (.-title note)
                       :created-at (.-createdAt note)
                       :updated-at (.-updatedAt note)
                       :sync-status (.-syncStatus note)
                       :is-blocks-synced (.-isBlocksSynced note)
                       :is-deleted (.-isDeleted note)
                       :blocks (map (fn [block]
                                     {:id (.-id block)
                                      :content (.-content block)
                                      :created-at (.-createdAt block)
                                      :updated-at (.-updatedAt block)
                                      :sync-status (.-syncStatus block)})
                                   blocks)
                       :tags (map (fn [tag]
                                   {:id (.-id tag)
                                    :name (.-name tag)})
                                 tags)}]
        (swap! (.-notes export-data) conj note-data)))
    export-data))

(defn save-export-file [export-data filename]
  "Save export data to a JSON file"
  (let [export-dir (create-export-directory)
        file-path (str (.-path export-dir) "/" filename)
        file (io/File. file-path)
        json-string (convert/jsonEncode export-data)]
    (.writeAsStringSync file json-string)
    file-path))

(defn export-notes []
  "Export all notes to a JSON file and return the file path"
  (let [export-data (export-notes-to-json)
        timestamp (format-date-time (DateTime/now))
        filename (str "mongol_notes_export_" timestamp ".json")]
    (save-export-file export-data filename)))

(defn import-notes-from-json [json-data]
  "Import notes from JSON data"
  (let [data (convert/jsonDecode json-data)
        version (.-version data)
        notes (.-notes data)]
    (doseq [note-data notes]
      (let [note-id (.-id note-data)
            title (.-title note-data)
            created-at (.-createdAt note-data)
            updated-at (.-updatedAt note-data)
            sync-status (.-syncStatus note-data)
            is-blocks-synced (.-isBlocksSynced note-data)
            is-deleted (.-isDeleted note-data)
            blocks (.-blocks note-data)
            tags (.-tags note-data)]
        
        ;; Create note
        (db/create-note note-id title :is-blocks-synced is-blocks-synced)
        
        ;; Create blocks
        (doseq [block-data blocks]
          (let [content (.-content block-data)]
            (db/create-block note-id content)))
        
        ;; Create tags and associations
        (doseq [tag-data tags]
          (let [tag-id (.-id tag-data)
                tag-name (.-name tag-data)]
            (db/create-tag tag-name tag-id)
            (db/add-tag-to-note note-id tag-id)))))))

(defn read-export-file [file-path]
  "Read and parse JSON export file"
  (let [file (io/File. file-path)
        json-string (.readAsStringSync file)]
    (convert/jsonDecode json-string)))

(defn validate-export-data [data]
  "Validate export data structure"
  (and (.-version data)
       (.-notes data)
       (vector? (.-notes data))))

(defn get-export-file-info [file-path]
  "Get information about an export file"
  (let [file (io/File. file-path)]
    {:path file-path
     :name (.basename file)
     :size (.lengthSync file)
     :last-modified (.lastModifiedSync file)
     :exists (.existsSync file)}))

(defn list-export-files []
  "List all export files in the exports directory"
  (let [export-dir (create-export-directory)
        files (.listSync export-dir)
        json-files (filter (fn [file]
                            (and (.isFileSync file)
                                 (.endsWith (.basename (.path file)) ".json")))
                          files)]
    (map (fn [file]
           (get-export-file-info (.path file)))
         json-files)))

(defn delete-export-file [file-path]
  "Delete an export file"
  (let [file (io/File. file-path)]
    (when (.existsSync file)
      (.deleteSync file))))

(defn share-export-file [file-path]
  "Share an export file (platform specific implementation)"
  ;; This would need to be implemented with platform-specific sharing
  ;; For now, just return the file path
  file-path) 