(ns notes-app.utils.string
  (:require [clojure.string :as str]
            ["package:crypto/crypto.dart" :as crypto]))

;; Extract first line from content as title
(defn extract-title-from-content [content]
  (if (str/blank? content)
    "Шинэ тэмдэглэл"
    (let [first-line (-> content
                         (str/split #"\n")
                         first
                         str/trim)]
      (if (str/blank? first-line)
        "Шинэ тэмдэглэл"
        first-line))))

;; Join content from blocks
(defn blocks-to-content [blocks]
  (str/join "\n" (map :content blocks)))

;; Split content into lines
(defn content-to-lines [content]
  (str/split content #"\n"))

;; Get first non-empty line from content
(defn get-first-non-empty-line [content]
  (->> (content-to-lines content)
       (map str/trim)
       (filter #(not (str/blank? %)))
       first
       (or "Шинэ тэмдэглэл")))

;; Pad string to the left with a character
(defn pad-left [s pad-char target-length]
  (let [current-length (count s)
        padding-needed (- target-length current-length)]
    (if (<= padding-needed 0)
      s
      (str (str/join (repeat padding-needed pad-char)) s))))

;; =============================================================================
;; JSON Utilities
;; =============================================================================

(defn json-encode
  "Encode data to JSON string"
  [data]
  (dart:convert/jsonEncode data))

(defn json-decode
  "Decode JSON string to data"
  [json-string]
  (dart:convert/jsonDecode json-string)) 

(defn calculate-base-hash
  "Calculate base_hash value for note content, used for conflict detection"
  [^String content]
  (let [normalized-content (-> content
                               (str/trim)
                               (str/lower-case)
                               (str/replace #"\s+" ""))
        bytes (.codeUnits normalized-content)
        digest (.convert (crypto/sha256) bytes)]
    (.toString digest)))