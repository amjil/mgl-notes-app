(ns notes-app.utils.span
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:flutter/gestures.dart" :as g]))

(defn parse-block-spans [text]
  (let [link-pattern #"\[\[([^#\]]+)(?:#([^\]]+))?\]\]"]
    (loop [matches (re-seq link-pattern text)
           spans []
           last-end 0]
      (if (empty? matches)
        ;; Add remaining plain text
        (if (< last-end (count text))
          (conj spans {:type :text :content (subs text last-end)})
          spans)
        (let [[full-match note-name block-id] (first matches)
              start (.indexOf text full-match last-end)
              end (+ start (count full-match))
              ;; Create display text for link (without [[ and ]])
              display-text (if block-id
                            (str note-name "#" block-id)
                            note-name)
              ;; Add plain text before the link
              spans-with-text (if (> start last-end)
                               (conj spans {:type :text :content (subs text last-end start)})
                               spans)
              ;; Add the link
              spans-with-link (conj spans-with-text {:type :link
                                                     :content full-match
                                                     :display-text display-text
                                                     :note-name note-name
                                                     :block-id block-id})]
          (recur (rest matches) (concat spans spans-with-link) end))))))

(defn ^m/TextSpan create-text-span [span theme]
  ;;"Create a text span"
  (m/TextSpan
   .text (:content span)
   .style (m/TextStyle
           .color (-> theme .-colorScheme .-onSurface)
           .fontSize 16)))

(defn ^m/TextSpan create-link-span [span theme on-link-tap]
  ;;   "Create a link span"
  (let [recognizer (g/TapGestureRecognizer.)]
    (set! (.-onTap recognizer)
          (fn []
            (dart:core/print "tap")
            (when on-link-tap
              (on-link-tap (:note-name span) (:block-id span)))))
    (m/TextSpan
     .text (:display-text span)
     .style (m/TextStyle
             .color (-> theme .-colorScheme .-primary)
             .fontSize 16
             .decoration m/TextDecoration.overline
             .fontWeight m/FontWeight.w500)
     .recognizer recognizer))) 