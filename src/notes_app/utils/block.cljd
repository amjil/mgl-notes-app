(ns notes-app.utils.block 
  (:require
    [notes-app.utils.diff :as diff]
    [clojure.string :as str]))

(defn reorder-blocks [note old-index new-index]
  (let [blocks (vec (.-blockIds note))
        block-to-move (nth blocks old-index)
        ;; Step 1: Remove element from old position
        without-old (vec (concat (take old-index blocks)
                                 (drop (inc old-index) blocks)))
        ;; Step 2: Insert element at new position
        new-block-ids (vec (concat (take new-index without-old)
                                   [block-to-move]
                                   (drop new-index without-old)))]
    new-block-ids))

(defn extract-block-ids-from-note [note]
  (let [block-ids (get note "blockIds")]
    (if (nil? block-ids)
      []
      (as-> block-ids m
            (subs m 1 (dec (count m)))
            (str/split m #",")
            vec))))

(defn sort-blocks-by-note [note blocks]
  (let [block-ids (extract-block-ids-from-note note)
        indexd-map (zipmap block-ids (range))]
    (vec (sort-by (fn [block] (get indexd-map (.-blockId block))) blocks))))

(defn extract-blocks-from-note [note]
  (if (or (nil? note) (nil? (get note "content"))
          (empty? (get note "content")))
    []
    (let [ids (extract-block-ids-from-note note)
          blocks (diff/text-to-blocks (get note "content") ids)]
      blocks)))