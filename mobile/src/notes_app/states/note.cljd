(ns notes-app.states.note
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:uuid/uuid.dart" :as uuid]
   [notes-app.services.note :as service]
   [notes-app.states.global :as gs]))
   
(declare notes-from-folder)
   
(defn create-note [content]
  (let [did (if (nil? (:folder @gs/state))
              nil
              (.-id (:folder @gs/state)))]
    (await (service/create-note did content))
    (notes-from-folder)))
    
(defn update-note [content]
  (let [id (.-id (:note @gs/state))]
    (await (service/update-note id content))
    (notes-from-folder)))
    
(defn delete-note [id]
  (await (service/delete-note id))
  (notes-from-folder))
    
(defn notes-from-folder []
  (let [fid (if (nil? (:folder @gs/state))
              nil
              (.-id (:folder @gs/state)))
        result (await (service/query-notes-from-folder fid))]
    (swap! gs/state assoc :notes result)))
    
(defn move-notes [folder-id ids]
  (await (service/move-notes folder-id ids))
  (notes-from-folder))
  
(defn query-notes [word]
  (let [result (await (service/query-notes word))]
    (swap! gs/state assoc :search-result result)))
