(ns notes-app.states.note
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:uuid/uuid.dart" :as uuid]
   [notes-app.services.note :as service]
   [notes-app.states.global :as gs]))
   
(declare notes-from-folder)
   
;; (def ^m/TextEditingController text-controller (m/TextEditingController))

(defn setting-note-controller [text-controller]
  (set! (.-text text-controller) 
        (if (nil? (:note @gs/state))
          ""
          (get (:note @gs/state) "content")))
  (swap! gs/state assoc :keyboard/text-controller text-controller))

(defn create-note [content]
  (let [uuid (uuid/Uuid)
        id (.v4 uuid)
        did (if (nil? (:folder @gs/state))
              nil
              (get (:folder @gs/state) "id"))]
    (await (service/create-note did id content))
    (notes-from-folder)))
    
(defn update-note [content]
  (let [id (get (:note @gs/state) "id")]
    (await (service/update-note id content))
    (notes-from-folder)))
    
(defn delete-note [id]
  (await (service/delete-note id))
  (notes-from-folder))
    
(defn notes-from-folder []
  (let [fid (if (nil? (:folder @gs/state))
              nil
              (get (:folder @gs/state) "id"))
        result (await (service/query-notes-from-folder fid))]
    (swap! gs/state assoc :notes result)))
