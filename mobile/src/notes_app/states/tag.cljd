(ns notes-app.states.tag
  (:require
   ["package:flutter/material.dart" :as m]
   [notes-app.services.tag :as tag-service]
   [notes-app.states.global :as gs]))

(declare update-filtered-tags)

(defn get-note-tags [state id]
  (let [tags (await (tag-service/query-note-tags id))] 
    (swap! state assoc :draft-tags tags)))

(defn add-note-tag [state name]
  (let [id  (await (tag-service/create-tag name))
        note-id (-> @state :note (get "id"))
        _ (await (tag-service/add-note-tag note-id id))]
    (swap! state update :note-tags concat
           [{"id" id "name" name "related_num" 1}])))

(defn delete-note-tag [state id]
  (let [note (:note @state)
        tags (:note-tags @state)
        _ (await (tag-service/delete-note-tag (:note_id note) id))]
    (swap! state assoc :note-tags 
           (remove #(= id (get % "id")) tags))))

(defn query-tags [state q]
  (let [result (await (tag-service/query-tags q))]
    (swap! state assoc :tags result)))

(defn all-tags []
  (let [result (await (tag-service/all-tags))]
    (swap! gs/state assoc :tags result)))

(defn clear-filter []
  (swap! gs/state assoc :tag nil))
  
(defn tag-filterd-search []
  (let [filterd (->> (get-in @gs/state [:tag :filter])
                     (filter (fn [[_ v]] (= 1 v)))
                     (map first))
        omitted (->> (get-in @gs/state [:tag :filter])
                     (filter (fn [[_ v]] (= 2 v)))
                     (map first))
        result (await (tag-service/tag-filterd-search filterd omitted))]
    (swap! gs/state assoc :search-result result)))