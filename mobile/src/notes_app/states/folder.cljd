(ns notes-app.states.folder
  (:require
   [notes-app.services.folder :as service]
   [notes-app.states.global :as gs]
   [notes-app.utils.util :as util]))

(declare all-folders sub-folders)

(defn create-folder [pid name]
  (await (service/create-folder pid name))
  (if (nil? (:folder @gs/state))
    (all-folders)
    (sub-folders (.-id (:folder @gs/state)))))

(defn delete-folder [id]
  (service/delete-folder id)
  (all-folders))

(defn all-folders []
  (let [result (await (service/all-folders))]
    (swap! gs/state assoc :folders result)))
    
(defn sub-folders [id]
  (let [result (await (service/sub-folders id))]
    (swap! gs/state assoc :sub-folders result)))
    
(defn move-folder [pid id]
  (await (service/move-folder pid id))
  (if (nil? (:folder @gs/state))
    (all-folders)
    (sub-folders (.-id (:folder @gs/state)))))
    
(defn rename-folder [^String name]
  (let [id (.-id (:folder @gs/state))]
    (await (service/update-folder id name))
    (swap! gs/state assoc :folder (await (service/get-folder id))))
  (if (nil? (:folder @gs/state))
    (all-folders)
    (sub-folders (.-id (:folder @gs/state)))))
    
(defn parent-folders []
  (let [result (await (service/all-folders))]
    (swap! gs/state assoc :parent-folders 
           (concat [{"id" nil "name" "All Notes" "related_num" "*"}]
                   result))))
                   
;; copied from https://gist.github.com/dnaeon/5e4f02a18a6f5e48bdb5925a60c48be8
(defn item-children [item coll]
  (let [children (-> (filter #(= (get % "parent_id") (get item "id")) coll) seq)]
    (assoc item "children" (map #(item-children % coll) children))))

(defn folders-tree []
  (let [result (->> (await (service/get-folders))
                    (map #(into {} %))
                    (map #(assoc % "parent_id"
                                 (if (empty? (get % "parent_id"))
                                   "0"
                                   (get % "parent_id")))))
        top-folder {"id" "0" "name" "All Notes" "related_num" "*"}
        trees (item-children top-folder result)]
    (swap! gs/state assoc :folders-tree
           (get trees "children"))))
                   
(defn move-sub-folders [id]
  (let [result (await (service/sub-folders id))]
    (swap! gs/state assoc :move-sub-folders result)))