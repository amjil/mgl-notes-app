(ns notes-app.services.sqlite
  (:require
   ["package:sqflite/sqflite.dart" :as sql]
   ["package:path/path.dart" :as path]
   [notes-app.services.pref :as perf]))

(declare add-column-if-not-exists)

(defn initialize-db []
  (let [dbpath (path/join (await (sql/getDatabasesPath))
                          "database.db")]
    (sql/openDatabase dbpath
                      .onCreate (fn [^sql/Database db version]
                                  (init-database db)
                                  )
                      .version 1)))

(defn init-database [^sql/Database db]
  (let [result (await (perf/get-int "db-version"))]
    (cond
      (nil? result)
      (do
        ;; ALL table's id is THE UUID because of sync with multi platforms, awoid Id confilicts.
        ;;   - Except the notes table, it's a virtual table & it's rowid is always integer. 
        ;;   - Don't add uuid id to virtual table, it will be indexed.
        (await (.execute db "CREATE TABLE IF NOT EXISTS folders(id uuid primary key,parent_id uuid,  name varchar(100), order_num integer DEFAULT 0, related_num integer DEFAULT 0)"))
        (await (.execute db "CREATE VIRTUAL TABLE IF NOT EXISTS notes USING fts4(content TEXT)"))
        ;; The Notes status -1 recycled, 0 inbox, 1 archived
        (await (.execute db "CREATE TABLE IF NOT EXISTS note_infos (
                                                                 id uuid primary key,
                                                                 folder_id uuid, 
                                                                 note_id integer,
                                                                 flag boolean NOT NULL DEFAULT 0,
                                                                 status smallint NOT NULL DEFAULT 0,
                                                                 created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
                                                                 updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)"))
        (await (.execute db "CREATE INDEX IF NOT EXISTS note_info_index_folder ON note_infos(folder_id)"))
        (await (.execute db "CREATE INDEX IF NOT EXISTS note_info_index_note ON note_infos(note_id)"))
        (await (.execute db "CREATE TABLE IF NOT EXISTS tags(id uuid, name varchar(100), related_num integer DEFAULT 0)"))
        (await (.execute db "CREATE TABLE IF NOT EXISTS note_tags(tag_id uuid, note_id uuid)"))
        (await (.execute db "CREATE INDEX IF NOT EXISTS note_tags_index_tag ON note_tags(tag_id)"))
        (await (.execute db "CREATE INDEX IF NOT EXISTS note_tags_index_note ON note_tags(note_id)"))
        (await (.execute db "CREATE TABLE IF NOT EXISTS waiting_for_sync(id uuid, table_id varchar(20), row_id text, 
                                                                         types_of smallint,
                                                                         status smallint default 0,
                                                                         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)"))
        (await (.execute db "CREATE TABLE IF NOT EXISTS note_diff_match(id uuid, note_id uuid, folder_id uuid, flag boolean,
                                                                         note_status smallint,
                                                                         types_of smallint,
                                                                         diff varchar(100000), 
                                                                         status smallint default 0,
                                                                         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)"))
        (perf/set-int "db-version" 1))
      :else (dart:core/print "init-database :else"))))
        

(defn add-column-if-not-exists [^sql/Database db table column new-column-sql]
  (let [sql (str "SELECT COUNT (*) AS CNTREC 
                  FROM pragma_table_info (?) 
                  WHERE name= ?")
        result (await (.rawQuery db sql [table column]))]
    (when (zero? (-> result first (get "CNTREC")))
      (.execute db new-column-sql))))

