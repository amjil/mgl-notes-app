(ns notes-app.services.ws
  (:require
   ["dart:convert" :as convert]
   ["package:sqflite/sqflite.dart" :as sqf]
   ["package:web_socket_client/web_socket_client.dart" :as websocket]
   [clojure.string :as str]
   [notes-app.states.global :as gs]
   [notes-app.services.sqlite :as sql]
   [notes-app.services.common :as common]
   [notes-app.services.pref :as pref]
   [notes-app.services.sync :as sync]
   [notes-app.services.env :as env]
   [notes-app.utils.util :as util]))

(def conn (atom nil))

(declare handle-message
         sync-data-result
         check-data-result)

(defn connect
  []
  (let [uri (Uri/parse (str "ws://" (env/get "base_url") "/api/ws/" (:user-token @gs/state)))
        socket (websocket/WebSocket uri)]
    (reset! conn socket)
    (.listen (.-connection socket) (fn [state] (dart:core/print (str "state = " state))))
    (.listen (.-messages socket)
             (fn [msg]
               (dart:core/print (str "message = " msg))
               (handle-message msg)))))

(defn close []
  (when-not (nil? @conn)
    (.close @conn)))

(defn send-msg [ctx type msg]
  (if (nil? @conn)
    (util/show-toast ctx "The Network is disconnected!")
    (.send @conn (convert/jsonEncode
                  {"type" type
                   "data" msg}))))
                   
(defn send-msg2 [type msg]
  (.send @conn (convert/jsonEncode
                {"type" type
                 "data" msg})))

(defn handle-message
  [msg]
  (let [data (convert/jsonDecode msg)]
    (condp = (get data "type")
      "chk-data-result"
      (let [{num "data"} data]
        (check-data-result num))

      "sync-data"
      nil
      
      "sync-data-result"
      (sync-data-result data)

      ;; else
      nil)))
      
(defn sync-data-result [data]
  (let [^sqf/Database db (await (sql/initialize-db))
        ids (get data "sync_ids")
        id (get data "sync_id")
        num (if (empty? ids)
              (await (.rawUpdate db
                                 "UPDATE waiting_for_sync SET status = 1 
                                  WHERE id = ?"
                                 [id]))
              (await (.rawUpdate db
                                 (str 
                                 "UPDATE waiting_for_sync SET status = 1 
                                  WHERE id in ("
                                  (str/join ", "
                                            (map (fn [_] (str "?")) ids))
                                  ")")
                                 [ids])))]
    num))
    
(defn sync-data [d]
  (let [{table :table
         data :data
         types-of :types_of} d]
    (when-let [record (as-> (sync/query-needs-sync-data) m
                        (filter #(and (= table (get % "table_id"))
                                      (= (get data "row_id") (get % "row_id")))
                                m)
                        (last m))]
      (cond
        (= 2 types-of (get record "types_of"))
        nil ;; do nothing

        ;; server deleted
        (= 2 types-of)
        nil))))
    
(defn fetch-data []
  (send-msg2 "fetch-data" {}))

(defn check-data-result [data]
  (when (> data 0)
    (fetch-data)))

;; Todo
(defn sync-data-conflict-handling [] nil)

;; Todo
(defn sync-data-merge [] nil)

(defn sync-batch-data [ctx]
  (let [data-list (sync/query-needs-sync-data)]
    (doall
     (map #(condp = (get % "types_of")
             0 (send-msg ctx "data_create" %)
             1 (send-msg ctx "data_update" %)
             2 (send-msg ctx "data_delete" %)
             (util/show-toast ctx "sync data type error")) data-list))))

(defn sync-data-trigger [types-of table data]
  (let [result (sync/create-sync-record types-of table (or (get data "id")
                                                      (str (get data "tag_id")
                                                           "|"
                                                           (get data "note_id"))))]
    (when (true? (await (common/connectivity)))
      (send-msg2 "sync-data"
                    {"types_of" types-of
                     "table" table
                     "data" data
                     "sync_id" result}))))