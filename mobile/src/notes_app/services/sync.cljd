(ns notes-app.services.sync
  (:require
   ["package:sqflite/sqflite.dart" :as sqf]
   ["package:uuid/uuid.dart" :as uuid]
   [notes-app.services.sqlite :as sql]))

(defn create-sync-record [types_of table rid]
  ;; t 0 create 1 update 2 delete
  (let [^sqf/Database db (await (sql/initialize-db))
        uuid (uuid/Uuid)
        id (.v4 uuid)]
    (await
     (.rawInsert db
                 "INSERT INTO waiting_for_sync 
                             (id, table_id, row_id, types_of) 
                             VALUES (?, ?, ?, ?)"
                 [id table rid types_of]))
    id))
    
(defn query-needs-sync-data []
  (let [^sqf/Database db (await (sql/initialize-db))
        result (->> (await
                     (.rawQuery
                      db
                      "SELECT id, table_id, row_id, types_of, created_at
                       FROM waiting_for_sync 
                       WHERE status = 0 
                       ORDER BY created_at desc 
                       ;"))
                    (group-by (fn [x] [(get x "table_id") (get x "row_id")]))
                    (map (fn [[_ v]] (assoc (into {} (last v))
                                            "sync_ids"
                                            (map #(get % "id") v)))))]
    result))
    

