(ns notes-app.services.tag
  (:require
   ["package:sqflite/sqflite.dart" :as sqf]
   ["package:uuid/uuid.dart" :as uuid]
   [clojure.string :as str]
   [notes-app.services.sqlite :as sql]))

(declare query-tag-with-name)

(defn create-tag [v]
  (let [^sqf/Database db (await (sql/initialize-db))
        result (await (query-tag-with-name v))
        uuid (uuid/Uuid)
        id (.v4 uuid)]
    (if (empty? result)
      (let [result (await
                    (.rawInsert db
                                "INSERT INTO tags (id, name) values (?, ?)"
                                [id v]))]
        id)
      (get (first result) "id"))))

(defn delete-tag [id]
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawDelete db
                 "DELETE FROM tags WHERE id = ?"
                 [id]))
    (await 
     (.rawDelete db
                 "DELETE FROM note_tags WHERE tag_id = ?"
                 [id]))))

(defn count-tags []
  (let [^sqf/Database db (await (sql/initialize-db))]
    (->
     (await
      (.rawQuery db "SELECT count(*) as total FROM tags "))
     first
     (get "total"))))

(defn all-tags []
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawQuery
      db
      "SELECT id, name, related_num
       FROM tags 
       ORDER BY related_num desc
       ;"))))

(defn query-tags [word]
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawQuery
      db
      "SELECT id, name, related_num
       FROM tags 
       WHERE name like '%?%'
       ORDER BY related_num desc
       ;"
      [word]))))

(defn query-tag-with-name [n]
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawQuery
      db
      "SELECT id, name, related_num
       FROM tags 
       WHERE name = ?
       ;"
      [n]))))

(defn query-note-tags [id]
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawQuery
      db
      "SELECT b.tag_id as id, a.name, a.related_num
       FROM tags a 
       LEFT JOIN note_tags b ON a.id = b.tag_id
       WHERE b.note_id = ?
       ORDER BY related_num desc
       ;"
      [id]))))

(defn add-note-tag [note_id tag_id]
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawInsert db
                 "INSERT INTO note_tags (note_id, tag_id) VALUES (?, ?)"
                 [note_id tag_id]))
    (await
     (.rawUpdate db
                 "UPDATE tags SET related_num = related_num + 1
                  WHERE id = ?"
                 [tag_id]))))

(defn delete-note-tag [note_id tag_id]
  (let [^sqf/Database db (await (sql/initialize-db))
        num (-> 
             (.rawQuery db "SELECT related_num as num FROM tags
                            WHERE id = ?"
                        [tag_id])
             await
             first
             (get "num"))]
    (await
     (.rawDelete db
                 "DELETE FROM note_tags 
                  WHERE note_id = ? and tag_id = ?"
                 [note_id tag_id]))
    (if (zero? num)
      (await
       (.rawDelete db
                   "DELETE FROM tags WHERE id = ?"
                   [tag_id]))
      (await
       (.rawUpdate db
                   "UPDATE tags SET related_num = related_num - 1
                    WHERE id = ?"
                   [tag_id])))))
                   
(defn extract-tags-from-note [t]
  (let [pattern (RegExp "#([\u1800-\u1881]+)" .caseSensitive false .multiLine true .unicode true)
        matchs (await (.allMatches pattern t))
        tags (map (fn [^Match x] (subs t (inc (.-start x)) (.-end x)))
                  matchs)]
    tags))
    

(defn add-or-delete-note-tags [id content]
  (let [tags (await (extract-tags-from-note content))
        n-tags (await (query-note-tags id))
        ids (await (mapv #(await (create-tag %)) tags))]

    ;; add - tags
    (doall
     (map #(when-not (some #{(await %)} (seq (map (fn [x] (get x "id")) n-tags)))
             (add-note-tag id (await %)))
          ids))

    ;; delete-tags
    (doall
     (map (fn [x] (delete-note-tag id (get x "id")))
          (remove #(some #{(get % "name")} (seq tags)) n-tags)))))