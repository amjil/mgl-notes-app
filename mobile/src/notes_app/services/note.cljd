(ns notes-app.services.note
  (:require
   ["package:uuid/uuid.dart" :as uuid]
   ["package:cljd_mobile/database/drift/database.dart" :as schema]
   ["package:cljd_mobile/generated/electric/drift_schema.dart" :as drift-schema]
   ["package:electricsql_flutter/drivers/drift.dart" :as electric-drift]
   ["package:drift/drift.dart" :as drift]
   [notes-app.services.db :as electric-db]
   [notes-app.services.tag :as tag-service]))

(defn create-note [^String dir ^String v]
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db client)
        note (schema.NotesCompanion/insert
              .id (.v4 (uuid/Uuid))
              .folderId (drift/Value dir)
              .electricUserId "ae1bad8a-5480-449b-bf82-9fd30bcd27b6"
              .content (drift/Value v)
              .flag 0
              .status 0
              .createdAt (drift/Value (DateTime.now))
              .updatedAt (drift/Value (DateTime.now)))]
    ;; (tag-service/add-or-delete-note-tags id v)
    (await
     (.insert (.into db (.-notes db))
              note))))

(defn delete-note [id]
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db  client)]
    (await
     (.go
      (doto (.delete db (.-notes db))
        (.where (fn [^drift-schema/Notes tbl] (.equals (.-id tbl) id))))))))

(defn update-note [id ^String content]
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db  client)]
    (await
     (.write
      (doto (.update db (.-notes db))
        (.where (fn [^drift-schema/Notes tbl] (.equals (.-id tbl) id))))
      (schema/NotesCompanion
       .content (drift/Value content)
       .updatedAt (drift/Value (DateTime.now)))))
    (tag-service/add-or-delete-note-tags id content)))

(defn flag-note [id]
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db  client)]
    (await
     (.write
      (doto (.update db (.-notes db))
        (.where (fn [^drift-schema/Notes tbl] (.equals (.-id tbl) id))))
      (schema/NotesCompanion
       .flag 1
       .updatedAt (drift/Value (DateTime.now)))))))

(defn unflag-note [id]
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.write
      (doto (.update db (.-notes db))
        (.where (fn [^drift-schema/Notes tbl] (.equals (.-id tbl) id))))
      (schema/NotesCompanion
       .flag 0
       .updatedAt (drift/Value (DateTime.now)))))))

(defn recycle-note [id]
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.write
      (doto (.update db (.-notes db))
        (.where (fn [^drift-schema/Notes tbl] (.equals (.-id tbl) id))))
      (schema/NotesCompanion
       .status -1
       .updatedAt (drift/Value (DateTime.now)))))))

(defn archive-note [id]
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.write
      (doto (.update db (.-notes db))
        (.where (fn [^drift-schema/Notes tbl] (.equals (.-id tbl) id))))
      (schema/NotesCompanion
       .status 1
       .updatedAt (drift/Value (DateTime.now)))))))

(defn inbox-note [id]
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.write
      (doto (.update db (.-notes db))
        (.where (fn [^drift-schema/Notes tbl] (.equals (.-id tbl) id))))
      (schema/NotesCompanion
       .status 0
       .updatedAt (drift/Value (DateTime.now)))))))
       
(defn query-notes-from-folder [id]
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.get
      (doto (.select db (.-notes db))
        (.where (fn [^drift-schema/Notes tbl] (.equals (.-folderId tbl) id))))))))

(defn move-notes [folder-id ids] nil)
;; (defn move-notes [folder-id ids]
;;   (let [^sqf/Database db (await (sql/initialize-db))]
;;     (await
;;      (.rawUpdate
;;       db
;;       (str
;;        "UPDATE note_infos SET folder_id = ? 
;;         WHERE id in ("
;;        (str/join
;;         ","
;;         (map (fn [_] (str "?")) ids))
;;        " )")
;;       (concat [folder-id] (vec ids))))))

(defn query-notes [word] nil)
;; (defn query-notes [word]
;;   (let [^sqf/Database db (await (sql/initialize-db))
;;         ids (->> (.rawQuery db
;;                             "select rowid from notes 
;;                              where notes match ?"
;;                             [word])
;;                  await
;;                  (map #(get % "rowid")))
;;         ids-q (str "(" (clojure.string/join ", " (map #(str %) ids)) ")")]
;;     (await
;;      (.rawQuery
;;       db
;;       (str
;;        "select a.*, b.content
;;            from note_infos a 
;;               left join notes b on a.note_id = b.rowid 
;;            where note_id in " ids-q "
;;            order by a.note_id desc
;;            ;")))))
