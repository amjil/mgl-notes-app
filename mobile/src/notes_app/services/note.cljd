(ns notes-app.services.note
  (:require
   ["package:sqflite/sqflite.dart" :as sqf]
   ["package:flutter/material.dart" :as m]
   [notes-app.services.sqlite :as sql]))


(defn create-note [dir id v]
  (let [^sqf/Database db (await (sql/initialize-db))
        id1 (await
             (.rawInsert db
                         "INSERT INTO notes values (?)"
                         [v]))
        _ (await
           (.rawInsert db
                       "INSERT INTO note_infos (folder_id, id, note_id) values (?, ?, ?)"
                       [dir id id1]))]
    id1))

(defn delete-note [id]
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawDelete db
                 "DELETE FROM notes WHERE rowid = ?"
                 [id]))
    (await
     (.rawDelete db
                 "DELETE FROM note_infos WHERE note_id = ?"
                 [id]))))


(defn update-note [id content]
  (let [^sqf/Database db (await (sql/initialize-db))
        result (await (.rawQuery db
                                 "select note_id
                                  from note_infos a 
                                  where id = ?;"
                                 [id]))
        note-id (-> result first (get "note_id"))
        num (await (.rawUpdate db
                               "UPDATE notes SET content = ? WHERE rowid = ?"
                               [content note-id]))]
    num))

(defn flag-note [id]
  (let [^sqf/Database db (await (sql/initialize-db))
        num (await (.rawUpdate db
                               "UPDATE note_infos SET flag = 1 WHERE id = ?"
                               [id]))]
    num))

(defn unflag-note [id]
  (let [^sqf/Database db (await (sql/initialize-db))
        num (await (.rawUpdate db
                               "UPDATE note_infos SET flag = 0 WHERE id = ?"
                               [id]))]
    num))

(defn recycle-note [id]
  (let [^sqf/Database db (await (sql/initialize-db))
        num (await (.rawUpdate db
                               "UPDATE note_infos SET status = -1 WHERE id = ?"
                               [id]))]
    num))

(defn archive-note [id]
  (let [^sqf/Database db (await (sql/initialize-db))
        num (await (.rawUpdate db
                               "UPDATE note_infos SET status = 1 WHERE id = ?"
                               [id]))]
    num))

(defn inbox-note [id]
  (let [^sqf/Database db (await (sql/initialize-db))
        num (await (.rawUpdate db
                               "UPDATE note_infos SET status = 0 WHERE rowid = ?"
                               [id]))]
    num))
  
(defn get-note [id]
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawQuery
      db
      "select a.*, b.content
       from note_infos a 
          left join notes b on a.note_id = b.rowid 
       where a.id = ?
       order by a.note_id desc
       limit 1
       ;"
      [id]))))
      
(defn query-notes-from-folder [id]
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawQuery
      db
      "select a.*, b.content
         from note_infos a 
            left join notes b on a.note_id = b.rowid 
         where folder_id = ?
         order by a.note_id desc
         ;"
      [id]))))


