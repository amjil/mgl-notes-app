(ns notes-app.services.note
  (:require
   ["package:sqflite/sqflite.dart" :as sqf]
   [clojure.string :as str]
   [notes-app.services.sqlite :as sql]
   [notes-app.services.tag :as tag-service]
   [notes-app.services.ws :as ws]))

(defn create-note [dir id v]
  (let [^sqf/Database db (await (sql/initialize-db))
        id1 (await
             (.rawInsert db
                         "INSERT INTO notes values (?)"
                         [v]))
        _ (await
           (.rawInsert db
                       "INSERT INTO note_infos (folder_id, id, note_id) values (?, ?, ?)"
                       [dir id id1]))]
    (tag-service/add-or-delete-note-tags id v)
    (ws/sync-data-trigger
     0 "notes" {"id" id "folder_id" dir "content" v})
    id))

(defn delete-note [id]
  (let [^sqf/Database db (await (sql/initialize-db))]
    (tag-service/add-or-delete-note-tags id "")
    (await
     (.rawDelete db
                 "DELETE FROM notes WHERE rowid = ?"
                 [id]))
    (await
     (.rawDelete db
                 "DELETE FROM note_infos WHERE note_id = ?"
                 [id]))
    (ws/sync-data-trigger
     2 "notes" {"id" id})))


(defn update-note [id content]
  (let [^sqf/Database db (await (sql/initialize-db))
        result (await (.rawQuery db
                                 "select note_id
                                  from note_infos a 
                                  where id = ?;"
                                 [id]))
        note-id (-> result first (get "note_id"))
        num (await (.rawUpdate db
                               "UPDATE notes SET content = ? WHERE rowid = ?"
                               [content note-id]))]
    (tag-service/add-or-delete-note-tags id content)
    (ws/sync-data-trigger
     1 "notes" {"id" id "content" content})
    num))

(defn flag-note [id]
  (let [^sqf/Database db (await (sql/initialize-db))
        num (await (.rawUpdate db
                               "UPDATE note_infos SET flag = 1 WHERE id = ?"
                               [id]))]
    num))

(defn unflag-note [id]
  (let [^sqf/Database db (await (sql/initialize-db))
        num (await (.rawUpdate db
                               "UPDATE note_infos SET flag = 0 WHERE id = ?"
                               [id]))]
    num))

(defn recycle-note [id]
  (let [^sqf/Database db (await (sql/initialize-db))
        num (await (.rawUpdate db
                               "UPDATE note_infos SET status = -1 WHERE id = ?"
                               [id]))]
    num))

(defn archive-note [id]
  (let [^sqf/Database db (await (sql/initialize-db))
        num (await (.rawUpdate db
                               "UPDATE note_infos SET status = 1 WHERE id = ?"
                               [id]))]
    num))

(defn inbox-note [id]
  (let [^sqf/Database db (await (sql/initialize-db))
        num (await (.rawUpdate db
                               "UPDATE note_infos SET status = 0 WHERE rowid = ?"
                               [id]))]
    num))
  
(defn get-note [id]
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawQuery
      db
      "select a.*, b.content
       from note_infos a 
          left join notes b on a.note_id = b.rowid 
       where a.id = ?
       order by a.note_id desc
       limit 1
       ;"
      [id]))))
      
(defn query-notes-from-folder [id]
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawQuery
      db
      "select a.*, b.content
         from note_infos a 
            left join notes b on a.note_id = b.rowid 
         where folder_id = ?
         order by a.note_id desc
         ;"
      [id]))))


(defn move-notes [folder-id ids]
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawUpdate
      db
      (str
       "UPDATE note_infos SET folder_id = ? 
        WHERE id in ()"
       (str/join
        ","
        (map (fn [_] (str "?")) ids)))
      (concat [folder-id] (vec ids))))
    (doall
     (map #(ws/sync-data-trigger
            1 "notes" {"id" % "folder_id" folder-id})
          ids))))
      
(defn query-notes [word]
  (let [^sqf/Database db (await (sql/initialize-db))
        ids (->> (.rawQuery db
                            "select rowid from notes 
                             where notes match ?"
                            [word])
                 await
                 (map #(get % "rowid")))
        ids-q (str "(" (clojure.string/join ", " (map #(str %) ids)) ")")]
    (await
     (.rawQuery
      db
      (str
       "select a.*, b.content
           from note_infos a 
              left join notes b on a.note_id = b.rowid 
           where note_id in " ids-q "
           order by a.note_id desc
           ;")))))
