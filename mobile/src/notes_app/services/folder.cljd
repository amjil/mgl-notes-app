(ns notes-app.services.folder
  (:require
   ["package:uuid/uuid.dart" :as uuid]
   ["package:cljd_mobile/database/drift/database.dart" :as schema]
   ["package:cljd_mobile/generated/electric/drift_schema.dart" :as drift-schema]
   ["package:electricsql_flutter/drivers/drift.dart" :as electric-drift]
   ["package:drift/drift.dart" :as drift]
   [notes-app.services.db :as electric-db]))

(defn create-folder [pid ^String v]
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db client)
        folder (schema.FoldersCompanion/insert
                .id (.v4 (uuid/Uuid))
                .parentId (if (nil? pid)
                            (drift/Value nil)
                            (drift/Value pid))
                .electricUserId "ae1bad8a-5480-449b-bf82-9fd30bcd27b6"
                .name (drift/Value v)
                .orderNum (drift/Value 0)
                .relatedNum (drift/Value 0))]
    (await
     (.insert (.into db (.-folders db))
              folder))))
    
(defn update-folder [id ^String name]
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.write
      (doto (.update db (.-folders db))
        (.where (fn [^drift-schema/Folders tbl] (.equals (.-id tbl) id))))
      (schema/FoldersCompanion
       .name (drift/Value name))))))

(defn delete-folder [id]
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.customStatement db
                       "delete from folders where id = ?"
                       [id]))))

(defn all-folders []  
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.get
      (.select db (.-folders db))))))

(defn get-folders []
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.get
      (doto (.select db (.-folders db))
        (.where (fn [^drift-schema/Folders tbl] (-> tbl .-parentId .isNull))))))))

(defn get-folder [id]
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.getSingle
      (doto (.select db (.-folders db))
        (.where (fn [^drift-schema/Folders tbl] (.equals (.-id tbl) id))))))))
       
(defn sub-folders [id] 
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.get
      (doto (.select db (.-folders db))
        (.where (fn [^drift-schema/Folders tbl] (.equals (.-parentId tbl) id))))))))

(defn move-folder [pid id] 
  (let [^electric-drift/ElectricClient
        client @electric-db/elec
        ^schema/AppDatabase db (.-db client)]
    (await 
     (.write
      (doto (.update db (.-folders db))
        (.where (fn [^drift-schema/Folders tbl] (.equals (.-id tbl) id))))
      (schema/FoldersCompanion
       .parentId (drift/Value pid))))))
    