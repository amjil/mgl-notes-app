(ns notes-app.services.folder
  (:require
   ["package:sqflite/sqflite.dart" :as sqf]
   ["package:uuid/uuid.dart" :as uuid]
   [clojure.string :as str]
   [notes-app.services.sqlite :as sql]))

(declare query-folder-with-name)

(defn create-folder [pid v]
  (let [^sqf/Database db (await (sql/initialize-db))
        result (await (query-folder-with-name pid v))
        uuid (uuid/Uuid)
        id (.v4 uuid)
        id1
        (if (empty? result)
          (await
           (.rawInsert db
                       "INSERT INTO folders (id, parent_id, name) values (?, ?, ?)"
                       [id pid v]))
          nil)]
    id1))
    
(defn update-folder [id name]
  (let [^sqf/Database db (await (sql/initialize-db))
        num (await (.rawUpdate db
                               "UPDATE folders SET name = ? WHERE id = ?"
                               [name id]))]
    num))


(defn delete-folder [id]
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawDelete db
                 "DELETE FROM folders WHERE id = ?"
                 [id]))))

(defn all-folders []
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawQuery
      db
      "SELECT id, name, order_num, related_num
       FROM folders 
       WHERE parent_id is null
       ORDER BY order_num desc
       ;"))))
       
(defn get-folders []
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawQuery
      db
      "SELECT id, parent_id, name, order_num, related_num
       FROM folders 
       ORDER BY order_num desc
       ;"))))
       
(defn sub-folders [id]
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawQuery
      db
      "SELECT id, name, order_num, related_num
       FROM folders 
       WHERE parent_id = ? 
       ORDER BY order_num desc
       ;"
      [id]))))

(defn query-folder-with-name [id n]
  (let [^sqf/Database db (await (sql/initialize-db))]
    (await
     (.rawQuery
      db
      "SELECT id, name
       FROM folders 
       WHERE 
        parent_id = ?
        AND name = ?
       ;"
      [id n]))))

(defn move-folders [pid ids]
  (let [^sqf/Database db (await (sql/initialize-db))
        num (await
             (.rawUpdate
              db
              (str
               "UPDATE folders SET parent_id = ? 
                WHERE id in ("
               (str/join
                (map (fn [_] (str "?")) ids)
                ",") ")")
              (concat [pid] (vec ids))))]
    num))
    
(defn rename-folder [id name]
  (let [^sqf/Database db (await (sql/initialize-db))
        num (await
             (.rawUpdate
              db
              (str
               "UPDATE folders SET name = ? 
                WHERE id = ?")
              [name id]))]
    num))
