(ns notes-app.widgets.text-input
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   [cljd.flutter :as f]
   [virtual-keyboard.keyboard :as keyboard]
   [virtual-keyboard.options :as keyboard-options]
   [virtual-keyboard.keyboard-action :as keyboard-action]
   [menu-bar.menu :as menu]
   [notes-app.states.folder :as folder-state]
   [notes-app.states.global :as gs]))
   
(defn bar-button [child on-press]
   (m/InkWell
    .customBorder (m/CircleBorder)
    .onTap on-press
    .child
    (m/Padding
     .padding (.all m/EdgeInsets 8)
     .child child)))

(defn ^m/Widget input-box []
  (let [value (atom "")]
    (f/widget
     :context ctx
     :get [m/Navigator]
     :let [h (-> m/MediaQuery (.of ctx) .-size .-height)
           text-controller (:keyboard/text-controller @gs/state)]
     :watch [{candidates-list :keyboard/candidates-list
              keyboard-height :keyboard-height
              rename-folder :rename-folder
              folder :folder
              {in-app-keyboard "in-app-keyboard"} :profile} gs/state]
     :bg-watcher ([^m/TextEditingValue {input-text .-text} text-controller]
                  (reset! value input-text))
     (m/Column
      .mainAxisAlignment m.MainAxisAlignment/start
      .children
      [(m/Row
        .mainAxisAlignment m.MainAxisAlignment/spaceBetween
        .children
        [(m/Padding
          .padding (m.EdgeInsets/only .left 10 .top 10)
          .child
          (bar-button
           (m/Icon (.close m/Icons))
           (fn []
             (-> m/Navigator (.of ctx) .pop))))
         (m/Padding
          .padding (m.EdgeInsets/only .right 10 .top 10)
          .child
          (bar-button
           (m/Icon (.check m/Icons))
           (fn []
             (if (true? rename-folder)
               (folder-state/rename-folder @value)
               (folder-state/create-folder ctx
                                           (if (nil? folder)
                                             nil
                                             (get folder "id"))
                                           @value))
             (.pop navigator))))])
       (m/Divider)
       (m/Expanded
        .child
        (m/Stack
         .children
         [(m/Row
           .crossAxisAlignment m.CrossAxisAlignment/start
           .children
           [(m/Padding
             .padding (m.EdgeInsets/all 10)
             .child
             (mgl/MongolText
              "ᠰᠢᠨ᠎ᠡ ᠴᠣᠮᠣᠭ "
              .style (m/TextStyle .fontSize 20
                                  .fontWeight m.FontWeight/w600)))
            (m/Container
             .height (if (true? in-app-keyboard)
                       nil
                       (- h keyboard-height 60))
             .padding (.all m/EdgeInsets 5)
             .decoration (m/BoxDecoration
                          .borderRadius
                          (.all m/BorderRadius (.circular m/Radius 10))
                          .border (.all m/Border .width 0.1))
             .child
             (mgl/MongolTextField
              .controller text-controller
              .style (m/TextStyle .fontSize 22)
              .decoration (m/InputDecoration
                           .isDense true
                           .border (m/OutlineInputBorder
                                    .borderSide (m/BorderSide
                                                 .width 0.8)
                                    .borderRadius (.circular m/BorderRadius 10)))
              .showCursor true
              .autofocus true
              .readOnly (if (true? in-app-keyboard) true false)))])
          (m/Positioned
           .bottom 10
           .right 0
           .left 0
           .child
           (menu/menu {:bar {:elavation 10
                             :background-color
                             (-> m/Theme (.of ctx) .-colorScheme .-tertiaryContainer)}
                       :item {:on-tap (fn [x] (keyboard-action/on-candidates-clicked x gs/state))}}
                      candidates-list))]))
       (if (true? in-app-keyboard)
         (m/Container
          .color (-> m/Theme (.of ctx) .-colorScheme .-background)
          .child
          (m/IntrinsicHeight
           .child
           (keyboard/keyboard)))
         (m/Container))]))))