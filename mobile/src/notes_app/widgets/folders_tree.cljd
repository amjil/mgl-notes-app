(ns notes-app.widgets.folders-tree
  (:require 
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   [cljd.flutter :as f]
   [notes-app.widgets.top-bar :as top-bar]
   [notes-app.states.global :as gs]
   [notes-app.states.folder :as folder-state]
   [notes-app.states.note :as note-state]))

(declare list-view list-item)

(defn tree-view []
  (f/widget
   :context ctx
   :let [w (-> m/MediaQuery (.of ctx) .-size .-width)]
   :watch [{folders-tree :folders-tree
            folder :folder} gs/state]
   (m/Container)
   (m/Column
    .crossAxisAlignment m.CrossAxisAlignment/start
    .children
    [(m/Container
      .width w
      .padding (m.EdgeInsets/all 8)
      .child (top-bar/move-view-bars))
     (m/Divider .color (-> m/Theme (.of ctx) .-colorScheme .-outlineVariant)
                .thickness 1)
     (m/Expanded
      .child
      (list-view folders-tree))])))
                                 
(defn ^m/Widget list-item [i item]
  (let [expanded-value (atom false)]
    (f/widget
     :context ctx
     :get [m/Navigator]
     :let [w (-> m/MediaQuery (.of ctx) .-size .-width)]
     :watch [expanded expanded-value]
     (m/Container
      .height 40)
     (m/RotatedBox
      .quarterTurns 3)
     (m/ExpansionTile
      .onExpansionChanged (fn [x] (reset! expanded-value x))
      .children (map #(m/RotatedBox
                       .quarterTurns 1
                       .child
                       (mgl/MongolListTile
                        .title
                        (list-item 0 %))) (get item "children"))
      .title (m/RotatedBox
              .quarterTurns 0
              .child (m/Icon (if (true? expanded)
                               m.Icons/arrow_drop_down_circle
                               m.Icons/arrow_drop_down)))
      .trailing (m/GestureDetector
                 .onTap (fn []
                          (if (= (:move-entity @gs/state) "note")
                            (when-not (= (get (:note @gs/state) "folder_id")
                                         (get item "id"))
                              (note-state/move-notes
                               (get item "id")
                               [(get (:note @gs/state) "id")]))
                            (when-not (= (get (:folder @gs/state) "id")
                                         (get item "id"))
                              (folder-state/move-folder
                               (get item "id")
                               (get (:folder @gs/state) "id"))))
                          
                          (.pop navigator)
                          nil)
                 .child (m/RotatedBox
                         .quarterTurns 2
                         .child
                         (m/Container
                          .width w
                          .child
                          (m/Row
                           .children
                           [(m/RotatedBox
                             .quarterTurns -1
                             .child (m/Icon
                                     m.Icons/folder
                                     .color (-> m/Theme (.of ctx) .-colorScheme .-outlineVariant)))
                            (m/Text
                             (str "" (get item "name"))
                             .maxLines 1
                             .softWrap true
                             .overflow m.TextOverflow/ellipsis
                             .style (m/TextStyle
                                     .color (if (= (get (:folder @gs/state) "id")
                                                   (get item "id"))
                                              (-> m/Theme (.of ctx) .-colorScheme .-primary)
                                              nil)
                                     .fontSize 20))]))))))))

(defn list-view [items]
  (f/widget
   :context ctx
   (m.ListView/separated
    .shrinkWrap true
    .scrollDirection m.Axis/horizontal
    .separatorBuilder (fn [context i]
                        (m/VerticalDivider
                         .color (-> m/Theme (.of ctx) .-colorScheme .-primary)))
    .itemCount (count items)
    .itemBuilder (fn [context i]
                   (list-item i (nth items i))))))