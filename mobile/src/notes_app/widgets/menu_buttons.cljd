(ns notes-app.widgets.menu-buttons
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   [cljd.flutter :as f]
   [notes-app.utils.bottom-sheet :as bottom-sheet]
   [notes-app.states.global :as gs]
   [notes-app.states.folder :as folder-state]
   [notes-app.states.tag :as tag-state]
   [notes-app.states.note :as note-state]))
   
(defn menu-item [text icon on-press]
  (f/widget
   :context ctx
   (m/TextButton
    .style (m.TextButton/styleFrom
            .minimumSize m.Size/zero
            .padding (m.EdgeInsets/all 8)
            .tapTargetSize m.MaterialTapTargetSize/shrinkWrap)
    .child (m/Column
            .mainAxisAlignment m.MainAxisAlignment/spaceBetween
            .children
            [(m/Icon icon
                     .color (-> m/Theme (.of ctx) .-colorScheme .-onPrimary))
             (mgl/MongolText
              text
              .style (m/TextStyle
                      .fontSize 20
                      .color (-> m/Theme (.of ctx) .-colorScheme .-onPrimary)))])
    .onPressed on-press)))
    
(defn folder [^m/TextEditingController controller]
  (f/widget
   :context ctx
   :get [m/Navigator]
   (m/ListView
    .scrollDirection m.Axis/horizontal
    .shrinkWrap true
    .children [(m/SizedBox .width 8)
               (menu-item "ᠰᠢᠨ᠎ᠡ ᠴᠣᠮᠤᠭ"
                          m.Icons/create_new_folder
                          (fn []
                            (.pop navigator)
                            (swap! gs/state assoc :keyboard/text-controller controller)
                            (bottom-sheet/modal-bottom-sheet ctx nil)))
               (m/VerticalDivider
                .color (-> m/Theme (.of ctx) .-colorScheme .-outlineVariant))
               (menu-item "ᠳᠠᠬᠢᠨ ᠨᠡᠷᠡᠯᠡᠬᠦ"
                          m.Icons/edit
                          (fn []
                            (.pop navigator)
                            (swap! gs/state assoc :rename-folder true)
                            (set! (.-text controller) (-> @gs/state :folder .-name))
                            (bottom-sheet/modal-bottom-sheet ctx nil)))
               (m/VerticalDivider
                .color (-> m/Theme (.of ctx) .-colorScheme .-outlineVariant))
               (menu-item "ᠨᠡᠭᠦᠯᠭᠡᠬᠦ"
                          m.Icons/folder
                          (fn []
                            (.pop navigator)
                            (folder-state/folders-tree)
                            (swap! gs/state assoc :move-entity "folder")
                            (swap! gs/state assoc :move-folder nil)
                            (bottom-sheet/folder-selector-bottom-sheet ctx)))
               (m/VerticalDivider
                .color (-> m/Theme (.of ctx) .-colorScheme .-outlineVariant))
               (menu-item "ᠬᠠᠰᠤᠬᠤ"
                          m.Icons/delete
                          (fn []
                            (.pop navigator)
                            (folder-state/delete-folder (.-id (:folder @gs/state)))
                            (.pop navigator)
                            (swap! gs/state update :folder-link pop)
                            (swap! gs/state assoc :folder (last (:folder-link @gs/state)))
                            (if (nil? (:folder @gs/state))
                              (folder-state/all-folders)
                              (folder-state/sub-folders (.-id (:folder @gs/state))))))])))
                            

(defn tag [item]
  (f/widget
   :context ctx
   :get [m/Navigator]
   (m/ListView
    .scrollDirection m.Axis/horizontal
    .shrinkWrap true
    .children [(m/SizedBox .width 8)
               (menu-item "ᠬᠠᠰᠤᠬᠤ"
                          m.Icons/tag
                          (fn []
                            (.pop navigator)))
               (m/VerticalDivider
                .color (-> m/Theme (.of ctx) .-colorScheme .-outlineVariant))])))

(defn note [item]
  (f/widget
   :context ctx
   :get [m/Navigator]
   (m/ListView
    .scrollDirection m.Axis/horizontal
    .shrinkWrap true
    .children [(m/SizedBox .width 8)
               (menu-item "ᠨᠡᠭᠦᠯᠭᠡᠬᠦ"
                          m.Icons/article_outlined
                          (fn []
                            (.pop navigator)
                            (folder-state/folders-tree)
                            (swap! gs/state assoc :note item)
                            (swap! gs/state assoc :move-entity "note")
                            (swap! gs/state assoc :move-folder nil)
                            (bottom-sheet/folder-selector-bottom-sheet ctx)))
               (m/VerticalDivider
                .color (-> m/Theme (.of ctx) .-colorScheme .-outlineVariant))
               (menu-item "ᠬᠠᠰᠤᠬᠤ"
                          m.Icons/article_outlined
                          (fn []
                            (.pop navigator)
                            (note-state/delete-note (get item "id"))))
               (m/VerticalDivider
                .color (-> m/Theme (.of ctx) .-colorScheme .-outlineVariant))])))
