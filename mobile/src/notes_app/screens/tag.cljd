(ns notes-app.screens.tag
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   [cljd.flutter :as f]
   [notes-app.screens.note :as note-screen]
   [notes-app.widgets.search-item :as search-item]
   [notes-app.widgets.tag-item :as tag-item]
   [notes-app.widgets.search-input :as search-input]
   [notes-app.utils.router :as router]
   [notes-app.states.global :as gs]))
   
(def screen
  (let [text-value (atom nil)]
    (f/widget
     :context ctx
     :get [m/Navigator]
     :let [controller (:keyboard/text-controller gs/state)]
     :watch [{floating-input :floating-input
              search-result :search-result
              tags :tags :or {tags [] search-result []}} gs/state
             text text-value]
     (m/Scaffold
      .appBar nil)
     .body
     (m/SafeArea)
     (m/Stack
      .children
      [(m/Column
        .crossAxisAlignment m.CrossAxisAlignment/start
        .children [(m/Row
                    .mainAxisAlignment m.MainAxisAlignment/start
                    .children
                    [(m/InkWell
                      .customBorder (m/CircleBorder)
                      .onTap (fn []
                               (.pop navigator))
                      .child
                      (m/Icon m.Icons/keyboard_backspace))])
                   (m/Divider .color (-> m/Theme (.of ctx) .-colorScheme .-outlineVariant)
                              .thickness 1)
                   (m/Expanded
                    .child
                    (m/Row
                     .crossAxisAlignment m.CrossAxisAlignment/start
                     .children
                     [(mgl/MongolText "Tags"
                                      .style (m/TextStyle
                                              .fontSize 20
                                              .color (-> m/Theme (.of ctx) .-colorScheme .-primary)
                                              .fontWeight m.FontWeight/w600))
                      (m/SizedBox .width 10)
                      (m/SizedBox
                       .width 40
                       .child
                       (m.ListView/separated
                        .separatorBuilder (fn [context i]
                                            (m/VerticalDivider
                                             .color (-> m/Theme (.of ctx) .-colorScheme .-primary)))
                        .itemCount (count tags)
                        .itemBuilder (fn [_ i]
                                       (tag-item/list-item (nth tags i)))))
                      (m/Expanded
                       .child
                       (m.ListView/separated
                        .scrollDirection m.Axis/horizontal
                        .separatorBuilder (fn [context i]
                                            (m/VerticalDivider
                                             .color (-> m/Theme (.of ctx) .-colorScheme .-primary)))
                        .itemCount (count search-result)
                        .itemBuilder (fn [_ i]
                                       (search-item/list-item
                                        (nth search-result i)
                                        (fn []
                                          (router/open-editor navigator note-screen/screen))))))]))])
       (if (true? floating-input)
         (search-input/input-box text-value)
         (m/SizedBox))]))))