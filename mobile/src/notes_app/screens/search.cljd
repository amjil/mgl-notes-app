(ns notes-app.screens.search 
  (:require 
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   [cljd.flutter :as f]
   [notes-app.widgets.search-input :as search-input]
   [notes-app.widgets.search-item :as search-item]
   [notes-app.states.global :as gs]))

(def screen
  (let [text-value (atom nil)]
    (f/widget
     :context ctx
     :get [:info m/Navigator]
     :let [h (-> m/MediaQuery (.of ctx) .-size .-height)
           w (-> m/MediaQuery (.of ctx) .-size .-width)
           controller (:keyboard/text-controller gs/state)]
     :watch [{floating-input :floating-input
              search-result :search-result} gs/state
             text text-value]
     (m/Scaffold .appBar nil)
     .body
     (m/SafeArea)
     (m/Stack
      .children
      [(m/Column
        .crossAxisAlignment m.CrossAxisAlignment/start
        .children [(m/Row
                    .mainAxisAlignment m.MainAxisAlignment/start
                    .children
                    [(m/InkWell
                      .customBorder (m/CircleBorder)
                      .onTap (fn []
                               (-> m/Navigator (.of ctx) .pop))
                      .child
                      (m/Icon m.Icons/keyboard_backspace))])
                   (m/Divider .color (-> m/Theme (.of ctx) .-colorScheme .-outlineVariant)
                              .thickness 1)
                   (m/Expanded
                    .child
                    (m/Row
                     .children
                     [(m/GestureDetector
                       .onTap (fn []
                                (swap! gs/state assoc :floating-input true)
                                (swap! gs/state assoc :keyboard/return-callback
                                       (fn []
                                         (swap! gs/state assoc :floating-input false)
                                         (reset! text-value (.-text controller))))
                                (swap! gs/state assoc :keyboard/return-mode :single-line)
                                nil)
                       .child
                       (f/widget
                        :context ctx
                        :let [h (-> m/MediaQuery (.of ctx) .-size .-height)]
                        (m/Container
                         .decoration (m/BoxDecoration
                                      .border (m.Border/all .color m.Colors/blueAccent))
                         .padding (m.EdgeInsets/all 10)
                         .height (* 0.8 h)
                         .child
                         (mgl/MongolText
                          (if (empty? text)
                            "ᠪᠢᠴᠢᠭᠡᠷᠡᠢ"
                            text)
                          .style (m/TextStyle .fontSize 20
                                              .fontWeight m.FontWeight/w400)))))
                      (m/SizedBox .width 10)
                      (m/Expanded
                       .child
                       (m.ListView/separated
                        .scrollDirection m.Axis/horizontal
                        .separatorBuilder (fn [context i]
                                            (m/VerticalDivider
                                             .color (-> m/Theme (.of ctx) .-colorScheme .-primary)))
                        .itemCount (count search-result)
                        .itemBuilder (fn [_ i]
                                       (search-item/list-item (nth search-result i)))))]))])
       (if (true? floating-input)
         (search-input/input-box text-value)
         (m/SizedBox))]))))
         