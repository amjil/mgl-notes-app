(ns notes-app.utils.bottom-sheet
  (:require 
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   [cljd.flutter.alpha2 :as f]
   [notes-app.widgets.text-input :as text-input]
   [notes-app.widgets.top-bar :as top-bar]
   [notes-app.states.global :as gs]
   [notes-app.states.folder :as folder-state]))
   
(defn modal-bottom-sheet [^m/BuildContext ctx child]
  (m/showModalBottomSheet
   .context ctx
   .isScrollControlled true
   .shape (m/RoundedRectangleBorder
           .borderRadius (m.BorderRadius/vertical .top (m.Radius/circular 20)))
   .builder
   (fn [^m/BuildContext context]
     (f/widget
      (m/FractionallySizedBox
       .heightFactor 0.9)
      (m/Scaffold)
      .body
      (m/Container)
      (m/SafeArea .top false)
      (text-input/input-box)))))
      
(defn move-folder-list-item [i item]
  (f/widget
   :get [m/Navigator]
   (m/GestureDetector
    .onTap (fn []
             (swap! gs/state assoc :move-folder item)
             (folder-state/move-sub-folders (get item "id"))
             nil)
    .child
    (m/Container
     .width 40
     .child
     (m/Column
      .mainAxisAlignment m.MainAxisAlignment/center
      .children [(m/Expanded
                  .child (m/Column
                          .children
                          [(m/Icon m.Icons/folder)
                           (m/SizedBox .height 10)
                           (mgl/MongolText
                            (str "" (get item "name"))
                            .maxLines 1
                            .softWrap true
                            .overflow m.TextOverflow/ellipsis
                            .style (m/TextStyle
                                    .fontSize 20))]))
                 (m/Padding
                  .padding (m.EdgeInsets/only .bottom 10)
                  .child
                  (m/Column
                   .children [(mgl/MongolText (str "" (get item "related_num")))
                              (m/Icon m.Icons/keyboard_arrow_down_outlined)]))])))))

(defn folder-selector-bottom-sheet [^m/BuildContext ctx]
  (m/showModalBottomSheet
   .context ctx
   .isScrollControlled true
   .shape (m/RoundedRectangleBorder
           .borderRadius (m.BorderRadius/vertical .top (m.Radius/circular 20)))
   .builder
   (fn [^m/BuildContext context]
     (f/widget
      :context ctx
      :let [w (-> m/MediaQuery (.of ctx) .-size .-width)]
      :watch [{parent-folders :parent-folders
               move-folder :move-folder
               move-sub-folders :move-sub-folders} gs/state]
      (m/FractionallySizedBox
       .heightFactor 0.7)
      (m/Scaffold)
      .body
      (m/Container)
      (m/SafeArea .top false)
      (m/SingleChildScrollView
       .scrollDirection m.Axis/horizontal)
      (m/Column
       .crossAxisAlignment m.CrossAxisAlignment/start
       .children
       [(m/Container
         .width w
         .padding (m.EdgeInsets/all 8)
         .child
         (top-bar/move-folder-bars))
        (m/Divider .color (-> m/Theme (.of ctx) .-colorScheme .-outlineVariant)
                   .thickness 1)
        (m/Expanded
         .child
         (m/Row
          .crossAxisAlignment m.CrossAxisAlignment/start
          .children
          [(m/Padding
            .padding (m.EdgeInsets/symmetric .horizontal 10)
            .child
            (m/Column
             .children
             [(mgl/MongolText "Folders"
                              .style (m/TextStyle
                                      .fontSize 20
                                      .color (-> m/Theme (.of ctx) .-colorScheme .-primary)
                                      .fontWeight m.FontWeight/w600))
              (m/SizedBox .height 10)
              (if (nil? move-folder)
                (m/SizedBox)
                (mgl/MongolText
                 (str (get move-folder "name") "")
                 .maxLines 1
                 .softWrap true
                 .overflow m.TextOverflow/ellipsis
                 .style (m/TextStyle
                         .fontSize 16
                         .color (-> m/Theme (.of ctx) .-colorScheme .-secondary)
                         .fontWeight m.FontWeight/w400)))]))
           (m.ListView/separated
            .scrollDirection m.Axis/horizontal
            .physics (m/NeverScrollableScrollPhysics)
            .separatorBuilder (fn [context i]
                                (m/VerticalDivider
                                 .color (-> m/Theme (.of ctx) .-colorScheme .-primary)))
            .itemCount (count (if (nil? move-folder)
                                parent-folders
                                move-sub-folders))
            .itemBuilder
            (fn [context i]
              (move-folder-list-item i (nth (if (nil? move-folder)
                                              parent-folders
                                              move-sub-folders) i)))
            .shrinkWrap true)]))])
      ))))