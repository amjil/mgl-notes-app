// GENERATED CODE - DO NOT MODIFY BY HAND

// ignore_for_file: always_use_package_imports, depend_on_referenced_packages
// ignore_for_file: prefer_double_quotes

import 'package:electricsql/electricsql.dart';

const kSqliteMigrations = <Migration>[
  Migration(
    statements: [
      'CREATE TABLE "folders" (\n  "id" TEXT NOT NULL,\n  "parent_id" TEXT,\n  "electric_user_id" TEXT NOT NULL,\n  "name" TEXT,\n  "order_num" INTEGER,\n  "related_num" INTEGER,\n  CONSTRAINT "folders_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
      'INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES (\'main\', \'folders\', 1);',
      'DROP TRIGGER IF EXISTS update_ensure_main_folders_primarykey;',
      'CREATE TRIGGER update_ensure_main_folders_primarykey\n  BEFORE UPDATE ON "main"."folders"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      		RAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
      'DROP TRIGGER IF EXISTS insert_main_folders_into_oplog;',
      'CREATE TRIGGER insert_main_folders_into_oplog\n  AFTER INSERT ON "main"."folders"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'folders\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'folders\', \'INSERT\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'electric_user_id\', new."electric_user_id", \'id\', new."id", \'name\', new."name", \'order_num\', new."order_num", \'parent_id\', new."parent_id", \'related_num\', new."related_num"), NULL, NULL);\nEND;',
      'DROP TRIGGER IF EXISTS update_main_folders_into_oplog;',
      'CREATE TRIGGER update_main_folders_into_oplog\n  AFTER UPDATE ON "main"."folders"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'folders\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'folders\', \'UPDATE\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'electric_user_id\', new."electric_user_id", \'id\', new."id", \'name\', new."name", \'order_num\', new."order_num", \'parent_id\', new."parent_id", \'related_num\', new."related_num"), json_object(\'electric_user_id\', old."electric_user_id", \'id\', old."id", \'name\', old."name", \'order_num\', old."order_num", \'parent_id\', old."parent_id", \'related_num\', old."related_num"), NULL);\nEND;',
      'DROP TRIGGER IF EXISTS delete_main_folders_into_oplog;',
      'CREATE TRIGGER delete_main_folders_into_oplog\n  AFTER DELETE ON "main"."folders"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'folders\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'folders\', \'DELETE\', json_patch(\'{}\', json_object(\'id\', old."id")), NULL, json_object(\'electric_user_id\', old."electric_user_id", \'id\', old."id", \'name\', old."name", \'order_num\', old."order_num", \'parent_id\', old."parent_id", \'related_num\', old."related_num"), NULL);\nEND;',
    ],
    version: '20240615022233',
  ),
  Migration(
    statements: [
      'CREATE TABLE "notes" (\n  "id" TEXT NOT NULL,\n  "folder_id" TEXT,\n  "electric_user_id" TEXT NOT NULL,\n  "content" TEXT,\n  "flag" INTEGER NOT NULL,\n  "status" INTEGER NOT NULL,\n  "created_at" TEXT,\n  "updated_at" TEXT,\n  CONSTRAINT "notes_folder_id_fkey" FOREIGN KEY ("folder_id") REFERENCES "folders" ("id") ON DELETE CASCADE,\n  CONSTRAINT "notes_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
      'INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES (\'main\', \'notes\', 1);',
      'DROP TRIGGER IF EXISTS update_ensure_main_notes_primarykey;',
      'CREATE TRIGGER update_ensure_main_notes_primarykey\n  BEFORE UPDATE ON "main"."notes"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      		RAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
      'DROP TRIGGER IF EXISTS insert_main_notes_into_oplog;',
      'CREATE TRIGGER insert_main_notes_into_oplog\n  AFTER INSERT ON "main"."notes"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'notes\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'notes\', \'INSERT\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'content\', new."content", \'created_at\', new."created_at", \'electric_user_id\', new."electric_user_id", \'flag\', new."flag", \'folder_id\', new."folder_id", \'id\', new."id", \'status\', new."status", \'updated_at\', new."updated_at"), NULL, NULL);\nEND;',
      'DROP TRIGGER IF EXISTS update_main_notes_into_oplog;',
      'CREATE TRIGGER update_main_notes_into_oplog\n  AFTER UPDATE ON "main"."notes"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'notes\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'notes\', \'UPDATE\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'content\', new."content", \'created_at\', new."created_at", \'electric_user_id\', new."electric_user_id", \'flag\', new."flag", \'folder_id\', new."folder_id", \'id\', new."id", \'status\', new."status", \'updated_at\', new."updated_at"), json_object(\'content\', old."content", \'created_at\', old."created_at", \'electric_user_id\', old."electric_user_id", \'flag\', old."flag", \'folder_id\', old."folder_id", \'id\', old."id", \'status\', old."status", \'updated_at\', old."updated_at"), NULL);\nEND;',
      'DROP TRIGGER IF EXISTS delete_main_notes_into_oplog;',
      'CREATE TRIGGER delete_main_notes_into_oplog\n  AFTER DELETE ON "main"."notes"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'notes\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'notes\', \'DELETE\', json_patch(\'{}\', json_object(\'id\', old."id")), NULL, json_object(\'content\', old."content", \'created_at\', old."created_at", \'electric_user_id\', old."electric_user_id", \'flag\', old."flag", \'folder_id\', old."folder_id", \'id\', old."id", \'status\', old."status", \'updated_at\', old."updated_at"), NULL);\nEND;',
      'DROP TRIGGER IF EXISTS compensation_insert_main_notes_folder_id_into_oplog;',
      '        CREATE TRIGGER compensation_insert_main_notes_folder_id_into_oplog\n          AFTER INSERT ON "main"."notes"\n          WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'notes\') AND\n               1 = (SELECT value from _electric_meta WHERE key = \'compensations\')\n        BEGIN\n          INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n          SELECT \'main\', \'folders\', \'COMPENSATION\', json_patch(\'{}\', json_object(\'id\', "id")), json_object(\'id\', "id"), NULL, NULL\n          FROM "main"."folders" WHERE "id" = new."folder_id";\n        END;\n      ',
      'DROP TRIGGER IF EXISTS compensation_update_main_notes_folder_id_into_oplog;',
      '        CREATE TRIGGER compensation_update_main_notes_folder_id_into_oplog\n          AFTER UPDATE ON "main"."notes"\n          WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'notes\') AND\n               1 = (SELECT value from _electric_meta WHERE key = \'compensations\')\n        BEGIN\n          INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n          SELECT \'main\', \'folders\', \'COMPENSATION\', json_patch(\'{}\', json_object(\'id\', "id")), json_object(\'id\', "id"), NULL, NULL\n          FROM "main"."folders" WHERE "id" = new."folder_id";\n        END;\n      ',
    ],
    version: '20240615042050',
  ),
  Migration(
    statements: [
      'CREATE TABLE "tags" (\n  "id" TEXT NOT NULL,\n  "electric_user_id" TEXT NOT NULL,\n  "name" TEXT,\n  "related_num" INTEGER,\n  CONSTRAINT "tags_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
      'CREATE TABLE "note_tags" (\n  "id" TEXT NOT NULL,\n  "electric_user_id" TEXT NOT NULL,\n  "tag_id" TEXT,\n  "note_id" TEXT,\n  CONSTRAINT "note_tags_note_id_fkey" FOREIGN KEY ("note_id") REFERENCES "notes" ("id") ON DELETE CASCADE,\n  CONSTRAINT "note_tags_tag_id_fkey" FOREIGN KEY ("tag_id") REFERENCES "tags" ("id") ON DELETE CASCADE,\n  CONSTRAINT "note_tags_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
      'INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES (\'main\', \'tags\', 1);',
      'DROP TRIGGER IF EXISTS update_ensure_main_tags_primarykey;',
      'CREATE TRIGGER update_ensure_main_tags_primarykey\n  BEFORE UPDATE ON "main"."tags"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      		RAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
      'DROP TRIGGER IF EXISTS insert_main_tags_into_oplog;',
      'CREATE TRIGGER insert_main_tags_into_oplog\n  AFTER INSERT ON "main"."tags"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'tags\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'tags\', \'INSERT\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'electric_user_id\', new."electric_user_id", \'id\', new."id", \'name\', new."name", \'related_num\', new."related_num"), NULL, NULL);\nEND;',
      'DROP TRIGGER IF EXISTS update_main_tags_into_oplog;',
      'CREATE TRIGGER update_main_tags_into_oplog\n  AFTER UPDATE ON "main"."tags"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'tags\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'tags\', \'UPDATE\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'electric_user_id\', new."electric_user_id", \'id\', new."id", \'name\', new."name", \'related_num\', new."related_num"), json_object(\'electric_user_id\', old."electric_user_id", \'id\', old."id", \'name\', old."name", \'related_num\', old."related_num"), NULL);\nEND;',
      'DROP TRIGGER IF EXISTS delete_main_tags_into_oplog;',
      'CREATE TRIGGER delete_main_tags_into_oplog\n  AFTER DELETE ON "main"."tags"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'tags\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'tags\', \'DELETE\', json_patch(\'{}\', json_object(\'id\', old."id")), NULL, json_object(\'electric_user_id\', old."electric_user_id", \'id\', old."id", \'name\', old."name", \'related_num\', old."related_num"), NULL);\nEND;',
      'INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES (\'main\', \'note_tags\', 1);',
      'DROP TRIGGER IF EXISTS update_ensure_main_note_tags_primarykey;',
      'CREATE TRIGGER update_ensure_main_note_tags_primarykey\n  BEFORE UPDATE ON "main"."note_tags"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      		RAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
      'DROP TRIGGER IF EXISTS insert_main_note_tags_into_oplog;',
      'CREATE TRIGGER insert_main_note_tags_into_oplog\n  AFTER INSERT ON "main"."note_tags"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'note_tags\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'note_tags\', \'INSERT\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'electric_user_id\', new."electric_user_id", \'id\', new."id", \'note_id\', new."note_id", \'tag_id\', new."tag_id"), NULL, NULL);\nEND;',
      'DROP TRIGGER IF EXISTS update_main_note_tags_into_oplog;',
      'CREATE TRIGGER update_main_note_tags_into_oplog\n  AFTER UPDATE ON "main"."note_tags"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'note_tags\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'note_tags\', \'UPDATE\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'electric_user_id\', new."electric_user_id", \'id\', new."id", \'note_id\', new."note_id", \'tag_id\', new."tag_id"), json_object(\'electric_user_id\', old."electric_user_id", \'id\', old."id", \'note_id\', old."note_id", \'tag_id\', old."tag_id"), NULL);\nEND;',
      'DROP TRIGGER IF EXISTS delete_main_note_tags_into_oplog;',
      'CREATE TRIGGER delete_main_note_tags_into_oplog\n  AFTER DELETE ON "main"."note_tags"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'note_tags\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'note_tags\', \'DELETE\', json_patch(\'{}\', json_object(\'id\', old."id")), NULL, json_object(\'electric_user_id\', old."electric_user_id", \'id\', old."id", \'note_id\', old."note_id", \'tag_id\', old."tag_id"), NULL);\nEND;',
      'DROP TRIGGER IF EXISTS compensation_insert_main_note_tags_note_id_into_oplog;',
      '        CREATE TRIGGER compensation_insert_main_note_tags_note_id_into_oplog\n          AFTER INSERT ON "main"."note_tags"\n          WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'note_tags\') AND\n               1 = (SELECT value from _electric_meta WHERE key = \'compensations\')\n        BEGIN\n          INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n          SELECT \'main\', \'notes\', \'COMPENSATION\', json_patch(\'{}\', json_object(\'id\', "id")), json_object(\'id\', "id"), NULL, NULL\n          FROM "main"."notes" WHERE "id" = new."note_id";\n        END;\n      ',
      'DROP TRIGGER IF EXISTS compensation_update_main_note_tags_note_id_into_oplog;',
      '        CREATE TRIGGER compensation_update_main_note_tags_note_id_into_oplog\n          AFTER UPDATE ON "main"."note_tags"\n          WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'note_tags\') AND\n               1 = (SELECT value from _electric_meta WHERE key = \'compensations\')\n        BEGIN\n          INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n          SELECT \'main\', \'notes\', \'COMPENSATION\', json_patch(\'{}\', json_object(\'id\', "id")), json_object(\'id\', "id"), NULL, NULL\n          FROM "main"."notes" WHERE "id" = new."note_id";\n        END;\n      ',
      'DROP TRIGGER IF EXISTS compensation_insert_main_note_tags_tag_id_into_oplog;',
      '        CREATE TRIGGER compensation_insert_main_note_tags_tag_id_into_oplog\n          AFTER INSERT ON "main"."note_tags"\n          WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'note_tags\') AND\n               1 = (SELECT value from _electric_meta WHERE key = \'compensations\')\n        BEGIN\n          INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n          SELECT \'main\', \'tags\', \'COMPENSATION\', json_patch(\'{}\', json_object(\'id\', "id")), json_object(\'id\', "id"), NULL, NULL\n          FROM "main"."tags" WHERE "id" = new."tag_id";\n        END;\n      ',
      'DROP TRIGGER IF EXISTS compensation_update_main_note_tags_tag_id_into_oplog;',
      '        CREATE TRIGGER compensation_update_main_note_tags_tag_id_into_oplog\n          AFTER UPDATE ON "main"."note_tags"\n          WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'note_tags\') AND\n               1 = (SELECT value from _electric_meta WHERE key = \'compensations\')\n        BEGIN\n          INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n          SELECT \'main\', \'tags\', \'COMPENSATION\', json_patch(\'{}\', json_object(\'id\', "id")), json_object(\'id\', "id"), NULL, NULL\n          FROM "main"."tags" WHERE "id" = new."tag_id";\n        END;\n      ',
    ],
    version: '20240615042239',
  ),
];
